
TP_MICRO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004328  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080044b0  080044b0  000054b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004514  08004514  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004514  08004514  00005514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800451c  0800451c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800451c  0800451c  0000551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004520  08004520  00005520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004524  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  0800458c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  0800458c  000062c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5b2  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c99  00000000  00000000  0001264a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  000142e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c5  00000000  00000000  00014e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026aef  00000000  00000000  0001571d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d765  00000000  00000000  0003c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb7c9  00000000  00000000  00049971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013513a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d0  00000000  00000000  00135180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00138650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004498 	.word	0x08004498

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004498 	.word	0x08004498

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int chr)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80004c0:	1d39      	adds	r1, r7, #4
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
 80004c6:	2201      	movs	r2, #1
 80004c8:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <__io_putchar+0x20>)
 80004ca:	f002 fddb 	bl	8003084 <HAL_UART_Transmit>
 return chr;
 80004ce:	687b      	ldr	r3, [r7, #4]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000e8 	.word	0x200000e8

080004dc <MCP23S17_WriteRegister>:

// Fonction d'envoi SPI au MCP23S17
void MCP23S17_WriteRegister(uint8_t reg, uint8_t value) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
    uint8_t data[3];
    data[0] = MCP23S17_ADDRESS; // Adresse + bit d'écriture
 80004ec:	2340      	movs	r3, #64	@ 0x40
 80004ee:	733b      	strb	r3, [r7, #12]
    data[1] = reg;   // Registre cible
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	737b      	strb	r3, [r7, #13]
    data[2] = value; // Valeur à écrire
 80004f4:	79bb      	ldrb	r3, [r7, #6]
 80004f6:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Activer CS
 80004f8:	2200      	movs	r2, #0
 80004fa:	2180      	movs	r1, #128	@ 0x80
 80004fc:	4809      	ldr	r0, [pc, #36]	@ (8000524 <MCP23S17_WriteRegister+0x48>)
 80004fe:	f000 febd 	bl	800127c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, data, 3, HAL_MAX_DELAY); // Transmettre SPI
 8000502:	f107 010c 	add.w	r1, r7, #12
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	2203      	movs	r2, #3
 800050c:	4806      	ldr	r0, [pc, #24]	@ (8000528 <MCP23S17_WriteRegister+0x4c>)
 800050e:	f002 fa90 	bl	8002a32 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // Désactiver CS
 8000512:	2201      	movs	r2, #1
 8000514:	2180      	movs	r1, #128	@ 0x80
 8000516:	4803      	ldr	r0, [pc, #12]	@ (8000524 <MCP23S17_WriteRegister+0x48>)
 8000518:	f000 feb0 	bl	800127c <HAL_GPIO_WritePin>
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	48000400 	.word	0x48000400
 8000528:	20000084 	.word	0x20000084

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fb73 	bl	8000c1c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f83f 	bl	80005b8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f8fd 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053e:	f000 f8cb 	bl	80006d8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000542:	f000 f88b 	bl	800065c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  printf("\r\n==== Systeme micro ====\r\n");
 8000546:	481b      	ldr	r0, [pc, #108]	@ (80005b4 <main+0x88>)
 8000548:	f003 fc12 	bl	8003d70 <puts>

  // RESET du MCP23S17 via PA0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f000 fe92 	bl	800127c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000558:	200a      	movs	r0, #10
 800055a:	f000 fbdb 	bl	8000d14 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2101      	movs	r1, #1
 8000562:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000566:	f000 fe89 	bl	800127c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800056a:	200a      	movs	r0, #10
 800056c:	f000 fbd2 	bl	8000d14 <HAL_Delay>

    // Initialisation du MCP23S17
    MCP23S17_WriteRegister(MCP23S17_IOCON, 0x08);  // Mode SPI hardware
 8000570:	2108      	movs	r1, #8
 8000572:	200a      	movs	r0, #10
 8000574:	f7ff ffb2 	bl	80004dc <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_IODIRA, 0x00); // PORTA en sortie (0 = output)
 8000578:	2100      	movs	r1, #0
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff ffae 	bl	80004dc <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_GPIOA, 0x00);  // Éteindre toutes les LEDs
 8000580:	2100      	movs	r1, #0
 8000582:	2012      	movs	r0, #18
 8000584:	f7ff ffaa 	bl	80004dc <MCP23S17_WriteRegister>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {

      for (uint8_t i = 0; i < 8; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	e00e      	b.n	80005ac <main+0x80>

          MCP23S17_WriteRegister(MCP23S17_GPIOA, (1 << i)); // Allumer une LED
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2201      	movs	r2, #1
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	2012      	movs	r0, #18
 800059c:	f7ff ff9e 	bl	80004dc <MCP23S17_WriteRegister>

          HAL_Delay(200); // Pause pour l'effet chenillard
 80005a0:	20c8      	movs	r0, #200	@ 0xc8
 80005a2:	f000 fbb7 	bl	8000d14 <HAL_Delay>
      for (uint8_t i = 0; i < 8; i++) {
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	3301      	adds	r3, #1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2b07      	cmp	r3, #7
 80005b0:	d9ed      	bls.n	800058e <main+0x62>
 80005b2:	e7e9      	b.n	8000588 <main+0x5c>
 80005b4:	080044b0 	.word	0x080044b0

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	@ 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	@ 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fcb2 	bl	8003f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005de:	f000 fe73 	bl	80012c8 <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f000 f922 	bl	8000830 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f6:	2310      	movs	r3, #16
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fe:	2302      	movs	r3, #2
 8000600:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000606:	230a      	movs	r3, #10
 8000608:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4618      	mov	r0, r3
 800061c:	f000 feaa 	bl	8001374 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000626:	f000 f903 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2303      	movs	r3, #3
 8000630:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fa72 	bl	8001b2c <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064e:	f000 f8ef 	bl	8000830 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3758      	adds	r7, #88	@ 0x58
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000660:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <MX_SPI3_Init+0x74>)
 8000662:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <MX_SPI3_Init+0x78>)
 8000664:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <MX_SPI3_Init+0x74>)
 8000668:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800066c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800066e:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <MX_SPI3_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000674:	4b16      	ldr	r3, [pc, #88]	@ (80006d0 <MX_SPI3_Init+0x74>)
 8000676:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800067a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067c:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_SPI3_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <MX_SPI3_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_SPI3_Init+0x74>)
 800068a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800068e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_SPI3_Init+0x74>)
 8000692:	2228      	movs	r2, #40	@ 0x28
 8000694:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_SPI3_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_SPI3_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_SPI3_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_SPI3_Init+0x74>)
 80006aa:	2207      	movs	r2, #7
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <MX_SPI3_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_SPI3_Init+0x74>)
 80006b6:	2208      	movs	r2, #8
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_SPI3_Init+0x74>)
 80006bc:	f002 f916 	bl	80028ec <HAL_SPI_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f000 f8b3 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000084 	.word	0x20000084
 80006d4:	40003c00 	.word	0x40003c00

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */



  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006de:	4a15      	ldr	r2, [pc, #84]	@ (8000734 <MX_USART2_UART_Init+0x5c>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_USART2_UART_Init+0x58>)
 800071c:	f002 fc64 	bl	8002fe8 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000726:	f000 f883 	bl	8000830 <Error_Handler>



  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000e8 	.word	0x200000e8
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b35      	ldr	r3, [pc, #212]	@ (8000824 <MX_GPIO_Init+0xec>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a34      	ldr	r2, [pc, #208]	@ (8000824 <MX_GPIO_Init+0xec>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b32      	ldr	r3, [pc, #200]	@ (8000824 <MX_GPIO_Init+0xec>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b2f      	ldr	r3, [pc, #188]	@ (8000824 <MX_GPIO_Init+0xec>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a2e      	ldr	r2, [pc, #184]	@ (8000824 <MX_GPIO_Init+0xec>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <MX_GPIO_Init+0xec>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <MX_GPIO_Init+0xec>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a28      	ldr	r2, [pc, #160]	@ (8000824 <MX_GPIO_Init+0xec>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <MX_GPIO_Init+0xec>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <MX_GPIO_Init+0xec>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	4a22      	ldr	r2, [pc, #136]	@ (8000824 <MX_GPIO_Init+0xec>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <MX_GPIO_Init+0xec>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2121      	movs	r1, #33	@ 0x21
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b6:	f000 fd61 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2180      	movs	r1, #128	@ 0x80
 80007be:	481a      	ldr	r0, [pc, #104]	@ (8000828 <MX_GPIO_Init+0xf0>)
 80007c0:	f000 fd5c 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4814      	ldr	r0, [pc, #80]	@ (800082c <MX_GPIO_Init+0xf4>)
 80007dc:	f000 fba4 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 80007e0:	2321      	movs	r3, #33	@ 0x21
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fa:	f000 fb95 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_GPIO_Init+0xf0>)
 8000816:	f000 fb87 	bl	8000f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	@ 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000
 8000828:	48000400 	.word	0x48000400
 800082c:	48000800 	.word	0x48000800

08000830 <Error_Handler>:

    /**
      * @brief  This function is executed in case of error occurrence.
      * @retval None
      */
    void Error_Handler(void) {
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
        /* USER CODE BEGIN Error_Handler_Debug */
        /* User can add his own implementation to report the HAL error return state */
        __disable_irq();
        while (1) {
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000846:	4a0e      	ldr	r2, [pc, #56]	@ (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6613      	str	r3, [r2, #96]	@ 0x60
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000864:	6593      	str	r3, [r2, #88]	@ 0x58
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a25      	ldr	r2, [pc, #148]	@ (8000938 <HAL_SPI_MspInit+0xb4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d144      	bne.n	8000930 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008a6:	4b25      	ldr	r3, [pc, #148]	@ (800093c <HAL_SPI_MspInit+0xb8>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008aa:	4a24      	ldr	r2, [pc, #144]	@ (800093c <HAL_SPI_MspInit+0xb8>)
 80008ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <HAL_SPI_MspInit+0xb8>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <HAL_SPI_MspInit+0xb8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	4a1e      	ldr	r2, [pc, #120]	@ (800093c <HAL_SPI_MspInit+0xb8>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ca:	4b1c      	ldr	r3, [pc, #112]	@ (800093c <HAL_SPI_MspInit+0xb8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b19      	ldr	r3, [pc, #100]	@ (800093c <HAL_SPI_MspInit+0xb8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a18      	ldr	r2, [pc, #96]	@ (800093c <HAL_SPI_MspInit+0xb8>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b16      	ldr	r3, [pc, #88]	@ (800093c <HAL_SPI_MspInit+0xb8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000900:	2306      	movs	r3, #6
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	480d      	ldr	r0, [pc, #52]	@ (8000940 <HAL_SPI_MspInit+0xbc>)
 800090c:	f000 fb0c 	bl	8000f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000910:	2320      	movs	r3, #32
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000920:	2306      	movs	r3, #6
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	@ (8000944 <HAL_SPI_MspInit+0xc0>)
 800092c:	f000 fafc 	bl	8000f28 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	@ 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40003c00 	.word	0x40003c00
 800093c:	40021000 	.word	0x40021000
 8000940:	48000800 	.word	0x48000800
 8000944:	48000400 	.word	0x48000400

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0ac      	sub	sp, #176	@ 0xb0
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2288      	movs	r2, #136	@ 0x88
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f003 fae1 	bl	8003f30 <memset>
  if(huart->Instance==USART2)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a21      	ldr	r2, [pc, #132]	@ (80009f8 <HAL_UART_MspInit+0xb0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d13b      	bne.n	80009f0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000978:	2302      	movs	r3, #2
 800097a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800097c:	2300      	movs	r3, #0
 800097e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4618      	mov	r0, r3
 8000986:	f001 faf5 	bl	8001f74 <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000990:	f7ff ff4e 	bl	8000830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000994:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <HAL_UART_MspInit+0xb4>)
 8000996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000998:	4a18      	ldr	r2, [pc, #96]	@ (80009fc <HAL_UART_MspInit+0xb4>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099e:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_UART_MspInit+0xb4>)
 80009a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <HAL_UART_MspInit+0xb4>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b0:	4a12      	ldr	r2, [pc, #72]	@ (80009fc <HAL_UART_MspInit+0xb4>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b8:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <HAL_UART_MspInit+0xb4>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c4:	230c      	movs	r3, #12
 80009c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009dc:	2307      	movs	r3, #7
 80009de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ec:	f000 fa9c 	bl	8000f28 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009f0:	bf00      	nop
 80009f2:	37b0      	adds	r7, #176	@ 0xb0
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <NMI_Handler+0x4>

08000a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <MemManage_Handler+0x4>

08000a18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a56:	f000 f93d 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	e00a      	b.n	8000a86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a70:	f3af 8000 	nop.w
 8000a74:	4601      	mov	r1, r0
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	60ba      	str	r2, [r7, #8]
 8000a7c:	b2ca      	uxtb	r2, r1
 8000a7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	3301      	adds	r3, #1
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	697a      	ldr	r2, [r7, #20]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	dbf0      	blt.n	8000a70 <_read+0x12>
  }

  return len;
 8000a8e:	687b      	ldr	r3, [r7, #4]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	e009      	b.n	8000abe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1c5a      	adds	r2, r3, #1
 8000aae:	60ba      	str	r2, [r7, #8]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fd00 	bl	80004b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	dbf1      	blt.n	8000aaa <_write+0x12>
  }
  return len;
 8000ac6:	687b      	ldr	r3, [r7, #4]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_close>:

int _close(int file)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af8:	605a      	str	r2, [r3, #4]
  return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_isatty>:

int _isatty(int file)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b10:	2301      	movs	r3, #1
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f003 fa30 	bl	8003fcc <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20018000 	.word	0x20018000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000170 	.word	0x20000170
 8000ba0:	200002c8 	.word	0x200002c8

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f003 f9ef 	bl	8003fd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fc97 	bl	800052c <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c0c:	08004524 	.word	0x08004524
  ldr r2, =_sbss
 8000c10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c14:	200002c4 	.word	0x200002c4

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <HAL_Init+0x3c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <HAL_Init+0x3c>)
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f944 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 f80f 	bl	8000c5c <HAL_InitTick>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	e001      	b.n	8000c4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4a:	f7ff fdf7 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40022000 	.word	0x40022000

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c68:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <HAL_InitTick+0x6c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d023      	beq.n	8000cb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c70:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <HAL_InitTick+0x70>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <HAL_InitTick+0x6c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f941 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10f      	bne.n	8000cb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d809      	bhi.n	8000cac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f919 	bl	8000ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_InitTick+0x74>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e007      	b.n	8000cbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e004      	b.n	8000cbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e001      	b.n	8000cbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000174 	.word	0x20000174

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000174 	.word	0x20000174

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	@ (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff47 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff5c 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb0 	bl	8000e7c <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e17f      	b.n	8001238 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8171 	beq.w	8001232 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <HAL_GPIO_Init+0x40>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d118      	bne.n	8001008 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	08db      	lsrs	r3, r3, #3
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	6939      	ldr	r1, [r7, #16]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80ac 	beq.w	8001232 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b5f      	ldr	r3, [pc, #380]	@ (8001258 <HAL_GPIO_Init+0x330>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010de:	4a5e      	ldr	r2, [pc, #376]	@ (8001258 <HAL_GPIO_Init+0x330>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001258 <HAL_GPIO_Init+0x330>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f2:	4a5a      	ldr	r2, [pc, #360]	@ (800125c <HAL_GPIO_Init+0x334>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800111c:	d025      	beq.n	800116a <HAL_GPIO_Init+0x242>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4f      	ldr	r2, [pc, #316]	@ (8001260 <HAL_GPIO_Init+0x338>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01f      	beq.n	8001166 <HAL_GPIO_Init+0x23e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4e      	ldr	r2, [pc, #312]	@ (8001264 <HAL_GPIO_Init+0x33c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x23a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4d      	ldr	r2, [pc, #308]	@ (8001268 <HAL_GPIO_Init+0x340>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x236>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4c      	ldr	r2, [pc, #304]	@ (800126c <HAL_GPIO_Init+0x344>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x232>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4b      	ldr	r2, [pc, #300]	@ (8001270 <HAL_GPIO_Init+0x348>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x22e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4a      	ldr	r2, [pc, #296]	@ (8001274 <HAL_GPIO_Init+0x34c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x22a>
 800114e:	2306      	movs	r3, #6
 8001150:	e00c      	b.n	800116c <HAL_GPIO_Init+0x244>
 8001152:	2307      	movs	r3, #7
 8001154:	e00a      	b.n	800116c <HAL_GPIO_Init+0x244>
 8001156:	2305      	movs	r3, #5
 8001158:	e008      	b.n	800116c <HAL_GPIO_Init+0x244>
 800115a:	2304      	movs	r3, #4
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x244>
 800115e:	2303      	movs	r3, #3
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x244>
 8001162:	2302      	movs	r3, #2
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x244>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x244>
 800116a:	2300      	movs	r3, #0
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	f002 0203 	and.w	r2, r2, #3
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800117c:	4937      	ldr	r1, [pc, #220]	@ (800125c <HAL_GPIO_Init+0x334>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800118a:	4b3b      	ldr	r3, [pc, #236]	@ (8001278 <HAL_GPIO_Init+0x350>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ae:	4a32      	ldr	r2, [pc, #200]	@ (8001278 <HAL_GPIO_Init+0x350>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011b4:	4b30      	ldr	r3, [pc, #192]	@ (8001278 <HAL_GPIO_Init+0x350>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d8:	4a27      	ldr	r2, [pc, #156]	@ (8001278 <HAL_GPIO_Init+0x350>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011de:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <HAL_GPIO_Init+0x350>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001202:	4a1d      	ldr	r2, [pc, #116]	@ (8001278 <HAL_GPIO_Init+0x350>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <HAL_GPIO_Init+0x350>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800122c:	4a12      	ldr	r2, [pc, #72]	@ (8001278 <HAL_GPIO_Init+0x350>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa22 f303 	lsr.w	r3, r2, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	f47f ae78 	bne.w	8000f38 <HAL_GPIO_Init+0x10>
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000
 8001260:	48000400 	.word	0x48000400
 8001264:	48000800 	.word	0x48000800
 8001268:	48000c00 	.word	0x48000c00
 800126c:	48001000 	.word	0x48001000
 8001270:	48001400 	.word	0x48001400
 8001274:	48001800 	.word	0x48001800
 8001278:	40010400 	.word	0x40010400

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40007000 	.word	0x40007000

080012c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d6:	d130      	bne.n	800133a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012d8:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012e4:	d038      	beq.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2232      	movs	r2, #50	@ 0x32
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4a1b      	ldr	r2, [pc, #108]	@ (8001370 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	0c9b      	lsrs	r3, r3, #18
 8001308:	3301      	adds	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130c:	e002      	b.n	8001314 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3b01      	subs	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800131c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001320:	d102      	bne.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f2      	bne.n	800130e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001334:	d110      	bne.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e00f      	b.n	800135a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800133a:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001346:	d007      	beq.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001350:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001356:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40007000 	.word	0x40007000
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e3ca      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001386:	4b97      	ldr	r3, [pc, #604]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001390:	4b94      	ldr	r3, [pc, #592]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 80e4 	beq.w	8001570 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <HAL_RCC_OscConfig+0x4a>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b0c      	cmp	r3, #12
 80013b2:	f040 808b 	bne.w	80014cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	f040 8087 	bne.w	80014cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013be:	4b89      	ldr	r3, [pc, #548]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x62>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e3a2      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1a      	ldr	r2, [r3, #32]
 80013da:	4b82      	ldr	r3, [pc, #520]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <HAL_RCC_OscConfig+0x7c>
 80013e6:	4b7f      	ldr	r3, [pc, #508]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013ee:	e005      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
 80013f0:	4b7c      	ldr	r3, [pc, #496]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80013f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d223      	bcs.n	8001448 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fd55 	bl	8001eb4 <RCC_SetFlashLatencyFromMSIRange>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e383      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001414:	4b73      	ldr	r3, [pc, #460]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a72      	ldr	r2, [pc, #456]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b70      	ldr	r3, [pc, #448]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	496d      	ldr	r1, [pc, #436]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001432:	4b6c      	ldr	r3, [pc, #432]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	4968      	ldr	r1, [pc, #416]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
 8001446:	e025      	b.n	8001494 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001448:	4b66      	ldr	r3, [pc, #408]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a65      	ldr	r2, [pc, #404]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b63      	ldr	r3, [pc, #396]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4960      	ldr	r1, [pc, #384]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001466:	4b5f      	ldr	r3, [pc, #380]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	495b      	ldr	r1, [pc, #364]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d109      	bne.n	8001494 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fd15 	bl	8001eb4 <RCC_SetFlashLatencyFromMSIRange>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e343      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001494:	f000 fc4a 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001498:	4602      	mov	r2, r0
 800149a:	4b52      	ldr	r3, [pc, #328]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	4950      	ldr	r1, [pc, #320]	@ (80015e8 <HAL_RCC_OscConfig+0x274>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	4a4e      	ldr	r2, [pc, #312]	@ (80015ec <HAL_RCC_OscConfig+0x278>)
 80014b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014b4:	4b4e      	ldr	r3, [pc, #312]	@ (80015f0 <HAL_RCC_OscConfig+0x27c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fbcf 	bl	8000c5c <HAL_InitTick>
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d052      	beq.n	800156e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	e327      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d032      	beq.n	800153a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014d4:	4b43      	ldr	r3, [pc, #268]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a42      	ldr	r2, [pc, #264]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc0c 	bl	8000cfc <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc08 	bl	8000cfc <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e310      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014fa:	4b3a      	ldr	r3, [pc, #232]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001506:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a36      	ldr	r2, [pc, #216]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4931      	ldr	r1, [pc, #196]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001524:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	492c      	ldr	r1, [pc, #176]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
 8001538:	e01a      	b.n	8001570 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800153a:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001546:	f7ff fbd9 	bl	8000cfc <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800154e:	f7ff fbd5 	bl	8000cfc <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e2dd      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001560:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f0      	bne.n	800154e <HAL_RCC_OscConfig+0x1da>
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800156e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d074      	beq.n	8001666 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b08      	cmp	r3, #8
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x21a>
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b0c      	cmp	r3, #12
 8001586:	d10e      	bne.n	80015a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d10b      	bne.n	80015a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d064      	beq.n	8001664 <HAL_RCC_OscConfig+0x2f0>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d160      	bne.n	8001664 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e2ba      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x24a>
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0b      	ldr	r2, [pc, #44]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e026      	b.n	800160c <HAL_RCC_OscConfig+0x298>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015c6:	d115      	bne.n	80015f4 <HAL_RCC_OscConfig+0x280>
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a05      	ldr	r2, [pc, #20]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a02      	ldr	r2, [pc, #8]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	e014      	b.n	800160c <HAL_RCC_OscConfig+0x298>
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	080044cc 	.word	0x080044cc
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000004 	.word	0x20000004
 80015f4:	4ba0      	ldr	r3, [pc, #640]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a9f      	ldr	r2, [pc, #636]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b9d      	ldr	r3, [pc, #628]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a9c      	ldr	r2, [pc, #624]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800160a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fb72 	bl	8000cfc <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fb6e 	bl	8000cfc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	@ 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e276      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162e:	4b92      	ldr	r3, [pc, #584]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x2a8>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fb5e 	bl	8000cfc <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fb5a 	bl	8000cfc <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	@ 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e262      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001656:	4b88      	ldr	r3, [pc, #544]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x2d0>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d060      	beq.n	8001734 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d005      	beq.n	8001684 <HAL_RCC_OscConfig+0x310>
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d119      	bne.n	80016b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d116      	bne.n	80016b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	4b7c      	ldr	r3, [pc, #496]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_OscConfig+0x328>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e23f      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b76      	ldr	r3, [pc, #472]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	4973      	ldr	r1, [pc, #460]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b0:	e040      	b.n	8001734 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d023      	beq.n	8001702 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a6e      	ldr	r2, [pc, #440]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb19 	bl	8000cfc <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fb15 	bl	8000cfc <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e21d      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e0:	4b65      	ldr	r3, [pc, #404]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ec:	4b62      	ldr	r3, [pc, #392]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	495f      	ldr	r1, [pc, #380]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
 8001700:	e018      	b.n	8001734 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001702:	4b5d      	ldr	r3, [pc, #372]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a5c      	ldr	r2, [pc, #368]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800170c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff faf5 	bl	8000cfc <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001716:	f7ff faf1 	bl	8000cfc <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1f9      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001728:	4b53      	ldr	r3, [pc, #332]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d03c      	beq.n	80017ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01c      	beq.n	8001782 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001748:	4b4b      	ldr	r3, [pc, #300]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174e:	4a4a      	ldr	r2, [pc, #296]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fad0 	bl	8000cfc <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff facc 	bl	8000cfc <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1d4      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001772:	4b41      	ldr	r3, [pc, #260]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ef      	beq.n	8001760 <HAL_RCC_OscConfig+0x3ec>
 8001780:	e01b      	b.n	80017ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001782:	4b3d      	ldr	r3, [pc, #244]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001788:	4a3b      	ldr	r2, [pc, #236]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fab3 	bl	8000cfc <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff faaf 	bl	8000cfc <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1b7      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ac:	4b32      	ldr	r3, [pc, #200]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ef      	bne.n	800179a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80a6 	beq.w	8001914 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10d      	bne.n	80017f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	4b27      	ldr	r3, [pc, #156]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017dc:	4a26      	ldr	r2, [pc, #152]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e4:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f0:	2301      	movs	r3, #1
 80017f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f4:	4b21      	ldr	r3, [pc, #132]	@ (800187c <HAL_RCC_OscConfig+0x508>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d118      	bne.n	8001832 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001800:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <HAL_RCC_OscConfig+0x508>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <HAL_RCC_OscConfig+0x508>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180c:	f7ff fa76 	bl	8000cfc <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001814:	f7ff fa72 	bl	8000cfc <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e17a      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <HAL_RCC_OscConfig+0x508>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d108      	bne.n	800184c <HAL_RCC_OscConfig+0x4d8>
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 800183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800184a:	e029      	b.n	80018a0 <HAL_RCC_OscConfig+0x52c>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d115      	bne.n	8001880 <HAL_RCC_OscConfig+0x50c>
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185a:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186a:	4a03      	ldr	r2, [pc, #12]	@ (8001878 <HAL_RCC_OscConfig+0x504>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x52c>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	40007000 	.word	0x40007000
 8001880:	4b9c      	ldr	r3, [pc, #624]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001886:	4a9b      	ldr	r2, [pc, #620]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001890:	4b98      	ldr	r3, [pc, #608]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001896:	4a97      	ldr	r2, [pc, #604]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d016      	beq.n	80018d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fa28 	bl	8000cfc <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f7ff fa24 	bl	8000cfc <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e12a      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c6:	4b8b      	ldr	r3, [pc, #556]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ed      	beq.n	80018b0 <HAL_RCC_OscConfig+0x53c>
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff fa11 	bl	8000cfc <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fa0d 	bl	8000cfc <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e113      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f4:	4b7f      	ldr	r3, [pc, #508]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ed      	bne.n	80018de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001902:	7ffb      	ldrb	r3, [r7, #31]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001908:	4b7a      	ldr	r3, [pc, #488]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190c:	4a79      	ldr	r2, [pc, #484]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 800190e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001912:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80fe 	beq.w	8001b1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001922:	2b02      	cmp	r3, #2
 8001924:	f040 80d0 	bne.w	8001ac8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001928:	4b72      	ldr	r3, [pc, #456]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0203 	and.w	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	429a      	cmp	r2, r3
 800193a:	d130      	bne.n	800199e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	3b01      	subs	r3, #1
 8001948:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d127      	bne.n	800199e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001958:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d11f      	bne.n	800199e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001968:	2a07      	cmp	r2, #7
 800196a:	bf14      	ite	ne
 800196c:	2201      	movne	r2, #1
 800196e:	2200      	moveq	r2, #0
 8001970:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001972:	4293      	cmp	r3, r2
 8001974:	d113      	bne.n	800199e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	3b01      	subs	r3, #1
 8001984:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d109      	bne.n	800199e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d06e      	beq.n	8001a7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d069      	beq.n	8001a78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019a4:	4b53      	ldr	r3, [pc, #332]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019b0:	4b50      	ldr	r3, [pc, #320]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0ad      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019c0:	4b4c      	ldr	r3, [pc, #304]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a4b      	ldr	r2, [pc, #300]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 80019c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019cc:	f7ff f996 	bl	8000cfc <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f992 	bl	8000cfc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e09a      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e6:	4b43      	ldr	r3, [pc, #268]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f2:	4b40      	ldr	r3, [pc, #256]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	4b40      	ldr	r3, [pc, #256]	@ (8001af8 <HAL_RCC_OscConfig+0x784>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a02:	3a01      	subs	r2, #1
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	4311      	orrs	r1, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a0c:	0212      	lsls	r2, r2, #8
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a14:	0852      	lsrs	r2, r2, #1
 8001a16:	3a01      	subs	r2, #1
 8001a18:	0552      	lsls	r2, r2, #21
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a20:	0852      	lsrs	r2, r2, #1
 8001a22:	3a01      	subs	r2, #1
 8001a24:	0652      	lsls	r2, r2, #25
 8001a26:	4311      	orrs	r1, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a2c:	0912      	lsrs	r2, r2, #4
 8001a2e:	0452      	lsls	r2, r2, #17
 8001a30:	430a      	orrs	r2, r1
 8001a32:	4930      	ldr	r1, [pc, #192]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a38:	4b2e      	ldr	r3, [pc, #184]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a44:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4a2a      	ldr	r2, [pc, #168]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a50:	f7ff f954 	bl	8000cfc <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f950 	bl	8000cfc <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e058      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	4b22      	ldr	r3, [pc, #136]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a76:	e050      	b.n	8001b1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e04f      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d148      	bne.n	8001b1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a94:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4a16      	ldr	r2, [pc, #88]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aa0:	f7ff f92c 	bl	8000cfc <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f928 	bl	8000cfc <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e030      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x734>
 8001ac6:	e028      	b.n	8001b1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d023      	beq.n	8001b16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f90f 	bl	8000cfc <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae0:	e00c      	b.n	8001afc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff f90b 	bl	8000cfc <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d905      	bls.n	8001afc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e013      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
 8001af4:	40021000 	.word	0x40021000
 8001af8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afc:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <HAL_RCC_OscConfig+0x7b0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1ec      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <HAL_RCC_OscConfig+0x7b0>)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	4905      	ldr	r1, [pc, #20]	@ (8001b24 <HAL_RCC_OscConfig+0x7b0>)
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_RCC_OscConfig+0x7b4>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	60cb      	str	r3, [r1, #12]
 8001b14:	e001      	b.n	8001b1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	feeefffc 	.word	0xfeeefffc

08001b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0e7      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b40:	4b75      	ldr	r3, [pc, #468]	@ (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d910      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b72      	ldr	r3, [pc, #456]	@ (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 0207 	bic.w	r2, r3, #7
 8001b56:	4970      	ldr	r1, [pc, #448]	@ (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0cf      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d010      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	4b66      	ldr	r3, [pc, #408]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d908      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b63      	ldr	r3, [pc, #396]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4960      	ldr	r1, [pc, #384]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d04c      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d121      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0a6      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bca:	4b54      	ldr	r3, [pc, #336]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d115      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e09a      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e08e      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e086      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c02:	4b46      	ldr	r3, [pc, #280]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 0203 	bic.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4943      	ldr	r1, [pc, #268]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c14:	f7ff f872 	bl	8000cfc <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7ff f86e 	bl	8000cfc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e06e      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b3a      	ldr	r3, [pc, #232]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 020c 	and.w	r2, r3, #12
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1eb      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d010      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	4b31      	ldr	r3, [pc, #196]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d208      	bcs.n	8001c72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c60:	4b2e      	ldr	r3, [pc, #184]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	492b      	ldr	r1, [pc, #172]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c72:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d210      	bcs.n	8001ca2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c80:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 0207 	bic.w	r2, r3, #7
 8001c88:	4923      	ldr	r1, [pc, #140]	@ (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c90:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e036      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cae:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	4918      	ldr	r1, [pc, #96]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d009      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ccc:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4910      	ldr	r1, [pc, #64]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ce0:	f000 f824 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	490b      	ldr	r1, [pc, #44]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f4>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	4a09      	ldr	r2, [pc, #36]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_RCC_ClockConfig+0x1fc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe ffa9 	bl	8000c5c <HAL_InitTick>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	080044cc 	.word	0x080044cc
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d44:	4b3b      	ldr	r3, [pc, #236]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x34>
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d121      	bne.n	8001d9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d11e      	bne.n	8001d9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d60:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d6c:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e005      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d88:	4a2b      	ldr	r2, [pc, #172]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10d      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001da4:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	e004      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db0:	4b23      	ldr	r3, [pc, #140]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001db2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d134      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d003      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001dd0:	e005      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001dd4:	617b      	str	r3, [r7, #20]
      break;
 8001dd6:	e005      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dda:	617b      	str	r3, [r7, #20]
      break;
 8001ddc:	e002      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	617b      	str	r3, [r7, #20]
      break;
 8001de2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	3301      	adds	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	fb03 f202 	mul.w	r2, r3, r2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	0e5b      	lsrs	r3, r3, #25
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	3301      	adds	r3, #1
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e24:	69bb      	ldr	r3, [r7, #24]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	@ 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	080044e4 	.word	0x080044e4
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000000 	.word	0x20000000

08001e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4904      	ldr	r1, [pc, #16]	@ (8001e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	080044dc 	.word	0x080044dc

08001e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e8c:	f7ff ffda 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0adb      	lsrs	r3, r3, #11
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4904      	ldr	r1, [pc, #16]	@ (8001eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	080044dc 	.word	0x080044dc

08001eb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ecc:	f7ff f9ee 	bl	80012ac <HAL_PWREx_GetVoltageRange>
 8001ed0:	6178      	str	r0, [r7, #20]
 8001ed2:	e014      	b.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed8:	4a24      	ldr	r2, [pc, #144]	@ (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee0:	4b22      	ldr	r3, [pc, #136]	@ (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eec:	f7ff f9de 	bl	80012ac <HAL_PWREx_GetVoltageRange>
 8001ef0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f04:	d10b      	bne.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b80      	cmp	r3, #128	@ 0x80
 8001f0a:	d919      	bls.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f10:	d902      	bls.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f12:	2302      	movs	r3, #2
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	e013      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f18:	2301      	movs	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	e010      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b80      	cmp	r3, #128	@ 0x80
 8001f22:	d902      	bls.n	8001f2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f24:	2303      	movs	r3, #3
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	e00a      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b80      	cmp	r3, #128	@ 0x80
 8001f2e:	d102      	bne.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f30:	2302      	movs	r3, #2
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	e004      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b70      	cmp	r3, #112	@ 0x70
 8001f3a:	d101      	bne.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 0207 	bic.w	r2, r3, #7
 8001f48:	4909      	ldr	r1, [pc, #36]	@ (8001f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40022000 	.word	0x40022000

08001f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f80:	2300      	movs	r3, #0
 8001f82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d041      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f94:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f98:	d02a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f9a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f9e:	d824      	bhi.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fa0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fa4:	d008      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fa6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001faa:	d81e      	bhi.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fb4:	d010      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fb6:	e018      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fb8:	4b86      	ldr	r3, [pc, #536]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a85      	ldr	r2, [pc, #532]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fc4:	e015      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fabb 	bl	8002548 <RCCEx_PLLSAI1_Config>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fd6:	e00c      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3320      	adds	r3, #32
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fba6 	bl	8002730 <RCCEx_PLLSAI2_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fe8:	e003      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	74fb      	strb	r3, [r7, #19]
      break;
 8001fee:	e000      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ff2:	7cfb      	ldrb	r3, [r7, #19]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10b      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ff8:	4b76      	ldr	r3, [pc, #472]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002006:	4973      	ldr	r1, [pc, #460]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800200e:	e001      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002010:	7cfb      	ldrb	r3, [r7, #19]
 8002012:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d041      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002024:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002028:	d02a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800202a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800202e:	d824      	bhi.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002030:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002034:	d008      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002036:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800203a:	d81e      	bhi.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002044:	d010      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002046:	e018      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002048:	4b62      	ldr	r3, [pc, #392]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a61      	ldr	r2, [pc, #388]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002052:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002054:	e015      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fa73 	bl	8002548 <RCCEx_PLLSAI1_Config>
 8002062:	4603      	mov	r3, r0
 8002064:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002066:	e00c      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3320      	adds	r3, #32
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fb5e 	bl	8002730 <RCCEx_PLLSAI2_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002078:	e003      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	74fb      	strb	r3, [r7, #19]
      break;
 800207e:	e000      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002082:	7cfb      	ldrb	r3, [r7, #19]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10b      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002088:	4b52      	ldr	r3, [pc, #328]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002096:	494f      	ldr	r1, [pc, #316]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800209e:	e001      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a0 	beq.w	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020b6:	4b47      	ldr	r3, [pc, #284]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020c6:	2300      	movs	r3, #0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b41      	ldr	r3, [pc, #260]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	4a40      	ldr	r2, [pc, #256]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d8:	4b3e      	ldr	r3, [pc, #248]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e8:	4b3b      	ldr	r3, [pc, #236]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a3a      	ldr	r2, [pc, #232]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020f4:	f7fe fe02 	bl	8000cfc <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020fa:	e009      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fc:	f7fe fdfe 	bl	8000cfc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d902      	bls.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	74fb      	strb	r3, [r7, #19]
        break;
 800210e:	e005      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002110:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ef      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d15c      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002122:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800212c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01f      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	429a      	cmp	r2, r3
 800213e:	d019      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002140:	4b24      	ldr	r3, [pc, #144]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800214a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800214c:	4b21      	ldr	r3, [pc, #132]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002152:	4a20      	ldr	r2, [pc, #128]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800215c:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002162:	4a1c      	ldr	r2, [pc, #112]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800216c:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d016      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7fe fdbd 	bl	8000cfc <HAL_GetTick>
 8002182:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002184:	e00b      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fdb9 	bl	8000cfc <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d902      	bls.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	74fb      	strb	r3, [r7, #19]
            break;
 800219c:	e006      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0ec      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021c2:	4904      	ldr	r1, [pc, #16]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021ca:	e009      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021cc:	7cfb      	ldrb	r3, [r7, #19]
 80021ce:	74bb      	strb	r3, [r7, #18]
 80021d0:	e006      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e0:	7c7b      	ldrb	r3, [r7, #17]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	4a9d      	ldr	r2, [pc, #628]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fe:	4b98      	ldr	r3, [pc, #608]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002204:	f023 0203 	bic.w	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220c:	4994      	ldr	r1, [pc, #592]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002220:	4b8f      	ldr	r3, [pc, #572]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	f023 020c 	bic.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222e:	498c      	ldr	r1, [pc, #560]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002242:	4b87      	ldr	r3, [pc, #540]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002248:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	4983      	ldr	r1, [pc, #524]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002264:	4b7e      	ldr	r3, [pc, #504]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	497b      	ldr	r1, [pc, #492]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002286:	4b76      	ldr	r3, [pc, #472]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002294:	4972      	ldr	r1, [pc, #456]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	496a      	ldr	r1, [pc, #424]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ca:	4b65      	ldr	r3, [pc, #404]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d8:	4961      	ldr	r1, [pc, #388]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fa:	4959      	ldr	r1, [pc, #356]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800230e:	4b54      	ldr	r3, [pc, #336]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002314:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800231c:	4950      	ldr	r1, [pc, #320]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002330:	4b4b      	ldr	r3, [pc, #300]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233e:	4948      	ldr	r1, [pc, #288]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002352:	4b43      	ldr	r3, [pc, #268]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002358:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	493f      	ldr	r1, [pc, #252]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d028      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002374:	4b3a      	ldr	r3, [pc, #232]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002382:	4937      	ldr	r1, [pc, #220]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800238e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002392:	d106      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002394:	4b32      	ldr	r3, [pc, #200]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a31      	ldr	r2, [pc, #196]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800239e:	60d3      	str	r3, [r2, #12]
 80023a0:	e011      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023aa:	d10c      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3304      	adds	r3, #4
 80023b0:	2101      	movs	r1, #1
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f8c8 	bl	8002548 <RCCEx_PLLSAI1_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d028      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023d2:	4b23      	ldr	r3, [pc, #140]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	491f      	ldr	r1, [pc, #124]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023f0:	d106      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023fc:	60d3      	str	r3, [r2, #12]
 80023fe:	e011      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002404:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002408:	d10c      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3304      	adds	r3, #4
 800240e:	2101      	movs	r1, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f899 	bl	8002548 <RCCEx_PLLSAI1_Config>
 8002416:	4603      	mov	r3, r0
 8002418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800241a:	7cfb      	ldrb	r3, [r7, #19]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02b      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002430:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002436:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243e:	4908      	ldr	r1, [pc, #32]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800244a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800244e:	d109      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a02      	ldr	r2, [pc, #8]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800245a:	60d3      	str	r3, [r2, #12]
 800245c:	e014      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002468:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800246c:	d10c      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3304      	adds	r3, #4
 8002472:	2101      	movs	r1, #1
 8002474:	4618      	mov	r0, r3
 8002476:	f000 f867 	bl	8002548 <RCCEx_PLLSAI1_Config>
 800247a:	4603      	mov	r3, r0
 800247c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d02f      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002494:	4b2b      	ldr	r3, [pc, #172]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024a2:	4928      	ldr	r1, [pc, #160]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	2102      	movs	r1, #2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f844 	bl	8002548 <RCCEx_PLLSAI1_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d014      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	74bb      	strb	r3, [r7, #18]
 80024ce:	e011      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3320      	adds	r3, #32
 80024de:	2102      	movs	r1, #2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f925 	bl	8002730 <RCCEx_PLLSAI2_Config>
 80024e6:	4603      	mov	r3, r0
 80024e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002500:	4b10      	ldr	r3, [pc, #64]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002506:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800250e:	490d      	ldr	r1, [pc, #52]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002522:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002528:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002532:	4904      	ldr	r1, [pc, #16]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800253a:	7cbb      	ldrb	r3, [r7, #18]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000

08002548 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002556:	4b75      	ldr	r3, [pc, #468]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d018      	beq.n	8002594 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002562:	4b72      	ldr	r3, [pc, #456]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0203 	and.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d10d      	bne.n	800258e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
       ||
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800257a:	4b6c      	ldr	r3, [pc, #432]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
       ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d047      	beq.n	800261e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e044      	b.n	800261e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d018      	beq.n	80025ce <RCCEx_PLLSAI1_Config+0x86>
 800259c:	2b03      	cmp	r3, #3
 800259e:	d825      	bhi.n	80025ec <RCCEx_PLLSAI1_Config+0xa4>
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d002      	beq.n	80025aa <RCCEx_PLLSAI1_Config+0x62>
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d009      	beq.n	80025bc <RCCEx_PLLSAI1_Config+0x74>
 80025a8:	e020      	b.n	80025ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025aa:	4b60      	ldr	r3, [pc, #384]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11d      	bne.n	80025f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ba:	e01a      	b.n	80025f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025bc:	4b5b      	ldr	r3, [pc, #364]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d116      	bne.n	80025f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025cc:	e013      	b.n	80025f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ce:	4b57      	ldr	r3, [pc, #348]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025da:	4b54      	ldr	r3, [pc, #336]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025ea:	e006      	b.n	80025fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	e004      	b.n	80025fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025f2:	bf00      	nop
 80025f4:	e002      	b.n	80025fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025f6:	bf00      	nop
 80025f8:	e000      	b.n	80025fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002602:	4b4a      	ldr	r3, [pc, #296]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6819      	ldr	r1, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	430b      	orrs	r3, r1
 8002618:	4944      	ldr	r1, [pc, #272]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d17d      	bne.n	8002720 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002624:	4b41      	ldr	r3, [pc, #260]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a40      	ldr	r2, [pc, #256]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 800262a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800262e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002630:	f7fe fb64 	bl	8000cfc <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002636:	e009      	b.n	800264c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002638:	f7fe fb60 	bl	8000cfc <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d902      	bls.n	800264c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	73fb      	strb	r3, [r7, #15]
        break;
 800264a:	e005      	b.n	8002658 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800264c:	4b37      	ldr	r3, [pc, #220]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ef      	bne.n	8002638 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d160      	bne.n	8002720 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d111      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002664:	4b31      	ldr	r3, [pc, #196]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800266c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6892      	ldr	r2, [r2, #8]
 8002674:	0211      	lsls	r1, r2, #8
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68d2      	ldr	r2, [r2, #12]
 800267a:	0912      	lsrs	r2, r2, #4
 800267c:	0452      	lsls	r2, r2, #17
 800267e:	430a      	orrs	r2, r1
 8002680:	492a      	ldr	r1, [pc, #168]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	610b      	str	r3, [r1, #16]
 8002686:	e027      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d112      	bne.n	80026b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800268e:	4b27      	ldr	r3, [pc, #156]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002696:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6892      	ldr	r2, [r2, #8]
 800269e:	0211      	lsls	r1, r2, #8
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6912      	ldr	r2, [r2, #16]
 80026a4:	0852      	lsrs	r2, r2, #1
 80026a6:	3a01      	subs	r2, #1
 80026a8:	0552      	lsls	r2, r2, #21
 80026aa:	430a      	orrs	r2, r1
 80026ac:	491f      	ldr	r1, [pc, #124]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	610b      	str	r3, [r1, #16]
 80026b2:	e011      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b4:	4b1d      	ldr	r3, [pc, #116]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6892      	ldr	r2, [r2, #8]
 80026c4:	0211      	lsls	r1, r2, #8
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6952      	ldr	r2, [r2, #20]
 80026ca:	0852      	lsrs	r2, r2, #1
 80026cc:	3a01      	subs	r2, #1
 80026ce:	0652      	lsls	r2, r2, #25
 80026d0:	430a      	orrs	r2, r1
 80026d2:	4916      	ldr	r1, [pc, #88]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a13      	ldr	r2, [pc, #76]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe fb0a 	bl	8000cfc <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ea:	e009      	b.n	8002700 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ec:	f7fe fb06 	bl	8000cfc <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d902      	bls.n	8002700 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	73fb      	strb	r3, [r7, #15]
          break;
 80026fe:	e005      	b.n	800270c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002700:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ef      	beq.n	80026ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	4904      	ldr	r1, [pc, #16]	@ (800272c <RCCEx_PLLSAI1_Config+0x1e4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002720:	7bfb      	ldrb	r3, [r7, #15]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000

08002730 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800273e:	4b6a      	ldr	r3, [pc, #424]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d018      	beq.n	800277c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800274a:	4b67      	ldr	r3, [pc, #412]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0203 	and.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d10d      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
       ||
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002762:	4b61      	ldr	r3, [pc, #388]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
       ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d047      	beq.n	8002806 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	e044      	b.n	8002806 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d018      	beq.n	80027b6 <RCCEx_PLLSAI2_Config+0x86>
 8002784:	2b03      	cmp	r3, #3
 8002786:	d825      	bhi.n	80027d4 <RCCEx_PLLSAI2_Config+0xa4>
 8002788:	2b01      	cmp	r3, #1
 800278a:	d002      	beq.n	8002792 <RCCEx_PLLSAI2_Config+0x62>
 800278c:	2b02      	cmp	r3, #2
 800278e:	d009      	beq.n	80027a4 <RCCEx_PLLSAI2_Config+0x74>
 8002790:	e020      	b.n	80027d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002792:	4b55      	ldr	r3, [pc, #340]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11d      	bne.n	80027da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a2:	e01a      	b.n	80027da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027a4:	4b50      	ldr	r3, [pc, #320]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d116      	bne.n	80027de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b4:	e013      	b.n	80027de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027b6:	4b4c      	ldr	r3, [pc, #304]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027c2:	4b49      	ldr	r3, [pc, #292]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027d2:	e006      	b.n	80027e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
      break;
 80027d8:	e004      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027da:	bf00      	nop
 80027dc:	e002      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027de:	bf00      	nop
 80027e0:	e000      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10d      	bne.n	8002806 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ea:	4b3f      	ldr	r3, [pc, #252]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6819      	ldr	r1, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	430b      	orrs	r3, r1
 8002800:	4939      	ldr	r1, [pc, #228]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d167      	bne.n	80028dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800280c:	4b36      	ldr	r3, [pc, #216]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a35      	ldr	r2, [pc, #212]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002818:	f7fe fa70 	bl	8000cfc <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800281e:	e009      	b.n	8002834 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002820:	f7fe fa6c 	bl	8000cfc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d902      	bls.n	8002834 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	73fb      	strb	r3, [r7, #15]
        break;
 8002832:	e005      	b.n	8002840 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002834:	4b2c      	ldr	r3, [pc, #176]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ef      	bne.n	8002820 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d14a      	bne.n	80028dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d111      	bne.n	8002870 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800284c:	4b26      	ldr	r3, [pc, #152]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6892      	ldr	r2, [r2, #8]
 800285c:	0211      	lsls	r1, r2, #8
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68d2      	ldr	r2, [r2, #12]
 8002862:	0912      	lsrs	r2, r2, #4
 8002864:	0452      	lsls	r2, r2, #17
 8002866:	430a      	orrs	r2, r1
 8002868:	491f      	ldr	r1, [pc, #124]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	4313      	orrs	r3, r2
 800286c:	614b      	str	r3, [r1, #20]
 800286e:	e011      	b.n	8002894 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002870:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002878:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	0211      	lsls	r1, r2, #8
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6912      	ldr	r2, [r2, #16]
 8002886:	0852      	lsrs	r2, r2, #1
 8002888:	3a01      	subs	r2, #1
 800288a:	0652      	lsls	r2, r2, #25
 800288c:	430a      	orrs	r2, r1
 800288e:	4916      	ldr	r1, [pc, #88]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002890:	4313      	orrs	r3, r2
 8002892:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002894:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a13      	ldr	r2, [pc, #76]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe fa2c 	bl	8000cfc <HAL_GetTick>
 80028a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028a6:	e009      	b.n	80028bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028a8:	f7fe fa28 	bl	8000cfc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d902      	bls.n	80028bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	73fb      	strb	r3, [r7, #15]
          break;
 80028ba:	e005      	b.n	80028c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028bc:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ef      	beq.n	80028a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4904      	ldr	r1, [pc, #16]	@ (80028e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000

080028ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e095      	b.n	8002a2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	2b00      	cmp	r3, #0
 8002904:	d108      	bne.n	8002918 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800290e:	d009      	beq.n	8002924 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
 8002916:	e005      	b.n	8002924 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fd ffa0 	bl	8000884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800295a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002964:	d902      	bls.n	800296c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e002      	b.n	8002972 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800296c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002970:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800297a:	d007      	beq.n	800298c <HAL_SPI_Init+0xa0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002984:	d002      	beq.n	800298c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	ea42 0103 	orr.w	r1, r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	f003 0204 	and.w	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a08:	ea42 0103 	orr.w	r1, r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b088      	sub	sp, #32
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a42:	f7fe f95b 	bl	8000cfc <HAL_GetTick>
 8002a46:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d001      	beq.n	8002a5c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e15c      	b.n	8002d16 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_SPI_Transmit+0x36>
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e154      	b.n	8002d16 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_SPI_Transmit+0x48>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e14d      	b.n	8002d16 <HAL_SPI_Transmit+0x2e4>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2203      	movs	r2, #3
 8002a86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	88fa      	ldrh	r2, [r7, #6]
 8002a9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	88fa      	ldrh	r2, [r7, #6]
 8002aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002acc:	d10f      	bne.n	8002aee <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002adc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002aec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af8:	2b40      	cmp	r3, #64	@ 0x40
 8002afa:	d007      	beq.n	8002b0c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b14:	d952      	bls.n	8002bbc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_SPI_Transmit+0xf2>
 8002b1e:	8b7b      	ldrh	r3, [r7, #26]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d145      	bne.n	8002bb0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b28:	881a      	ldrh	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b34:	1c9a      	adds	r2, r3, #2
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b48:	e032      	b.n	8002bb0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d112      	bne.n	8002b7e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	881a      	ldrh	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b68:	1c9a      	adds	r2, r3, #2
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b7c:	e018      	b.n	8002bb0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b7e:	f7fe f8bd 	bl	8000cfc <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d803      	bhi.n	8002b96 <HAL_SPI_Transmit+0x164>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d102      	bne.n	8002b9c <HAL_SPI_Transmit+0x16a>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e0b2      	b.n	8002d16 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1c7      	bne.n	8002b4a <HAL_SPI_Transmit+0x118>
 8002bba:	e083      	b.n	8002cc4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_SPI_Transmit+0x198>
 8002bc4:	8b7b      	ldrh	r3, [r7, #26]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d177      	bne.n	8002cba <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d912      	bls.n	8002bfa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	1c9a      	adds	r2, r3, #2
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b02      	subs	r3, #2
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bf8:	e05f      	b.n	8002cba <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330c      	adds	r3, #12
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c20:	e04b      	b.n	8002cba <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d12b      	bne.n	8002c88 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d912      	bls.n	8002c60 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3e:	881a      	ldrh	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4a:	1c9a      	adds	r2, r3, #2
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b02      	subs	r3, #2
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c5e:	e02c      	b.n	8002cba <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	7812      	ldrb	r2, [r2, #0]
 8002c6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c86:	e018      	b.n	8002cba <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c88:	f7fe f838 	bl	8000cfc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d803      	bhi.n	8002ca0 <HAL_SPI_Transmit+0x26e>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d102      	bne.n	8002ca6 <HAL_SPI_Transmit+0x274>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e02d      	b.n	8002d16 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ae      	bne.n	8002c22 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	6839      	ldr	r1, [r7, #0]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f947 	bl	8002f5c <SPI_EndRxTxTransaction>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d30:	f7fd ffe4 	bl	8000cfc <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d40:	f7fd ffdc 	bl	8000cfc <HAL_GetTick>
 8002d44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d46:	4b39      	ldr	r3, [pc, #228]	@ (8002e2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	015b      	lsls	r3, r3, #5
 8002d4c:	0d1b      	lsrs	r3, r3, #20
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d56:	e054      	b.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d050      	beq.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d60:	f7fd ffcc 	bl	8000cfc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d902      	bls.n	8002d76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d13d      	bne.n	8002df2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d8e:	d111      	bne.n	8002db4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d98:	d004      	beq.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da2:	d107      	bne.n	8002db4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002db2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dbc:	d10f      	bne.n	8002dde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ddc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e017      	b.n	8002e22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d19b      	bne.n	8002d58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000

08002e30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	@ 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e42:	f7fd ff5b 	bl	8000cfc <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002e52:	f7fd ff53 	bl	8000cfc <HAL_GetTick>
 8002e56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e60:	4b3d      	ldr	r3, [pc, #244]	@ (8002f58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00da      	lsls	r2, r3, #3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	0d1b      	lsrs	r3, r3, #20
 8002e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002e78:	e060      	b.n	8002f3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002e80:	d107      	bne.n	8002e92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d104      	bne.n	8002e92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d050      	beq.n	8002f3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e9a:	f7fd ff2f 	bl	8000cfc <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d902      	bls.n	8002eb0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d13d      	bne.n	8002f2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ebe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ec8:	d111      	bne.n	8002eee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed2:	d004      	beq.n	8002ede <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002edc:	d107      	bne.n	8002eee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef6:	d10f      	bne.n	8002f18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e010      	b.n	8002f4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d196      	bne.n	8002e7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3728      	adds	r7, #40	@ 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000000 	.word	0x20000000

08002f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff ff5b 	bl	8002e30 <SPI_WaitFifoStateUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f84:	f043 0220 	orr.w	r2, r3, #32
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e027      	b.n	8002fe0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	2180      	movs	r1, #128	@ 0x80
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff fec0 	bl	8002d20 <SPI_WaitFlagStateUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e014      	b.n	8002fe0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff ff34 	bl	8002e30 <SPI_WaitFifoStateUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd2:	f043 0220 	orr.w	r2, r3, #32
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e000      	b.n	8002fe0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e040      	b.n	800307c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fc9c 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	@ 0x24
 8003014:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0201 	bic.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fb6a 	bl	8003708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f8af 	bl	8003198 <UART_SetConfig>
 800303a:	4603      	mov	r3, r0
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e01b      	b.n	800307c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fbe9 	bl	800384c <UART_CheckIdleState>
 800307a:	4603      	mov	r3, r0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	@ 0x28
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003098:	2b20      	cmp	r3, #32
 800309a:	d177      	bne.n	800318c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_UART_Transmit+0x24>
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e070      	b.n	800318e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2221      	movs	r2, #33	@ 0x21
 80030b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ba:	f7fd fe1f 	bl	8000cfc <HAL_GetTick>
 80030be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d8:	d108      	bne.n	80030ec <HAL_UART_Transmit+0x68>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e003      	b.n	80030f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030f4:	e02f      	b.n	8003156 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2180      	movs	r1, #128	@ 0x80
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fc4b 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e03b      	b.n	800318e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	881a      	ldrh	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003128:	b292      	uxth	r2, r2
 800312a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	3302      	adds	r3, #2
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e007      	b.n	8003144 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1c9      	bne.n	80030f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2200      	movs	r2, #0
 800316a:	2140      	movs	r1, #64	@ 0x40
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fc15 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d004      	beq.n	8003182 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e005      	b.n	800318e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b08a      	sub	sp, #40	@ 0x28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	4313      	orrs	r3, r2
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4ba4      	ldr	r3, [pc, #656]	@ (8003458 <UART_SetConfig+0x2c0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a99      	ldr	r2, [pc, #612]	@ (800345c <UART_SetConfig+0x2c4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003200:	4313      	orrs	r3, r2
 8003202:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003214:	430a      	orrs	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a90      	ldr	r2, [pc, #576]	@ (8003460 <UART_SetConfig+0x2c8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d126      	bne.n	8003270 <UART_SetConfig+0xd8>
 8003222:	4b90      	ldr	r3, [pc, #576]	@ (8003464 <UART_SetConfig+0x2cc>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b03      	cmp	r3, #3
 800322e:	d81b      	bhi.n	8003268 <UART_SetConfig+0xd0>
 8003230:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <UART_SetConfig+0xa0>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	08003249 	.word	0x08003249
 800323c:	08003259 	.word	0x08003259
 8003240:	08003251 	.word	0x08003251
 8003244:	08003261 	.word	0x08003261
 8003248:	2301      	movs	r3, #1
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324e:	e116      	b.n	800347e <UART_SetConfig+0x2e6>
 8003250:	2302      	movs	r3, #2
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003256:	e112      	b.n	800347e <UART_SetConfig+0x2e6>
 8003258:	2304      	movs	r3, #4
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800325e:	e10e      	b.n	800347e <UART_SetConfig+0x2e6>
 8003260:	2308      	movs	r3, #8
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003266:	e10a      	b.n	800347e <UART_SetConfig+0x2e6>
 8003268:	2310      	movs	r3, #16
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326e:	e106      	b.n	800347e <UART_SetConfig+0x2e6>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7c      	ldr	r2, [pc, #496]	@ (8003468 <UART_SetConfig+0x2d0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d138      	bne.n	80032ec <UART_SetConfig+0x154>
 800327a:	4b7a      	ldr	r3, [pc, #488]	@ (8003464 <UART_SetConfig+0x2cc>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d82d      	bhi.n	80032e4 <UART_SetConfig+0x14c>
 8003288:	a201      	add	r2, pc, #4	@ (adr r2, 8003290 <UART_SetConfig+0xf8>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032c5 	.word	0x080032c5
 8003294:	080032e5 	.word	0x080032e5
 8003298:	080032e5 	.word	0x080032e5
 800329c:	080032e5 	.word	0x080032e5
 80032a0:	080032d5 	.word	0x080032d5
 80032a4:	080032e5 	.word	0x080032e5
 80032a8:	080032e5 	.word	0x080032e5
 80032ac:	080032e5 	.word	0x080032e5
 80032b0:	080032cd 	.word	0x080032cd
 80032b4:	080032e5 	.word	0x080032e5
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	080032e5 	.word	0x080032e5
 80032c0:	080032dd 	.word	0x080032dd
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ca:	e0d8      	b.n	800347e <UART_SetConfig+0x2e6>
 80032cc:	2302      	movs	r3, #2
 80032ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d2:	e0d4      	b.n	800347e <UART_SetConfig+0x2e6>
 80032d4:	2304      	movs	r3, #4
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032da:	e0d0      	b.n	800347e <UART_SetConfig+0x2e6>
 80032dc:	2308      	movs	r3, #8
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e2:	e0cc      	b.n	800347e <UART_SetConfig+0x2e6>
 80032e4:	2310      	movs	r3, #16
 80032e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ea:	e0c8      	b.n	800347e <UART_SetConfig+0x2e6>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a5e      	ldr	r2, [pc, #376]	@ (800346c <UART_SetConfig+0x2d4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d125      	bne.n	8003342 <UART_SetConfig+0x1aa>
 80032f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003464 <UART_SetConfig+0x2cc>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003300:	2b30      	cmp	r3, #48	@ 0x30
 8003302:	d016      	beq.n	8003332 <UART_SetConfig+0x19a>
 8003304:	2b30      	cmp	r3, #48	@ 0x30
 8003306:	d818      	bhi.n	800333a <UART_SetConfig+0x1a2>
 8003308:	2b20      	cmp	r3, #32
 800330a:	d00a      	beq.n	8003322 <UART_SetConfig+0x18a>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d814      	bhi.n	800333a <UART_SetConfig+0x1a2>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <UART_SetConfig+0x182>
 8003314:	2b10      	cmp	r3, #16
 8003316:	d008      	beq.n	800332a <UART_SetConfig+0x192>
 8003318:	e00f      	b.n	800333a <UART_SetConfig+0x1a2>
 800331a:	2300      	movs	r3, #0
 800331c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003320:	e0ad      	b.n	800347e <UART_SetConfig+0x2e6>
 8003322:	2302      	movs	r3, #2
 8003324:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003328:	e0a9      	b.n	800347e <UART_SetConfig+0x2e6>
 800332a:	2304      	movs	r3, #4
 800332c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003330:	e0a5      	b.n	800347e <UART_SetConfig+0x2e6>
 8003332:	2308      	movs	r3, #8
 8003334:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003338:	e0a1      	b.n	800347e <UART_SetConfig+0x2e6>
 800333a:	2310      	movs	r3, #16
 800333c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003340:	e09d      	b.n	800347e <UART_SetConfig+0x2e6>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a4a      	ldr	r2, [pc, #296]	@ (8003470 <UART_SetConfig+0x2d8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d125      	bne.n	8003398 <UART_SetConfig+0x200>
 800334c:	4b45      	ldr	r3, [pc, #276]	@ (8003464 <UART_SetConfig+0x2cc>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003352:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003356:	2bc0      	cmp	r3, #192	@ 0xc0
 8003358:	d016      	beq.n	8003388 <UART_SetConfig+0x1f0>
 800335a:	2bc0      	cmp	r3, #192	@ 0xc0
 800335c:	d818      	bhi.n	8003390 <UART_SetConfig+0x1f8>
 800335e:	2b80      	cmp	r3, #128	@ 0x80
 8003360:	d00a      	beq.n	8003378 <UART_SetConfig+0x1e0>
 8003362:	2b80      	cmp	r3, #128	@ 0x80
 8003364:	d814      	bhi.n	8003390 <UART_SetConfig+0x1f8>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <UART_SetConfig+0x1d8>
 800336a:	2b40      	cmp	r3, #64	@ 0x40
 800336c:	d008      	beq.n	8003380 <UART_SetConfig+0x1e8>
 800336e:	e00f      	b.n	8003390 <UART_SetConfig+0x1f8>
 8003370:	2300      	movs	r3, #0
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003376:	e082      	b.n	800347e <UART_SetConfig+0x2e6>
 8003378:	2302      	movs	r3, #2
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800337e:	e07e      	b.n	800347e <UART_SetConfig+0x2e6>
 8003380:	2304      	movs	r3, #4
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003386:	e07a      	b.n	800347e <UART_SetConfig+0x2e6>
 8003388:	2308      	movs	r3, #8
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800338e:	e076      	b.n	800347e <UART_SetConfig+0x2e6>
 8003390:	2310      	movs	r3, #16
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003396:	e072      	b.n	800347e <UART_SetConfig+0x2e6>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a35      	ldr	r2, [pc, #212]	@ (8003474 <UART_SetConfig+0x2dc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d12a      	bne.n	80033f8 <UART_SetConfig+0x260>
 80033a2:	4b30      	ldr	r3, [pc, #192]	@ (8003464 <UART_SetConfig+0x2cc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033b0:	d01a      	beq.n	80033e8 <UART_SetConfig+0x250>
 80033b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033b6:	d81b      	bhi.n	80033f0 <UART_SetConfig+0x258>
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033bc:	d00c      	beq.n	80033d8 <UART_SetConfig+0x240>
 80033be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033c2:	d815      	bhi.n	80033f0 <UART_SetConfig+0x258>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <UART_SetConfig+0x238>
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033cc:	d008      	beq.n	80033e0 <UART_SetConfig+0x248>
 80033ce:	e00f      	b.n	80033f0 <UART_SetConfig+0x258>
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d6:	e052      	b.n	800347e <UART_SetConfig+0x2e6>
 80033d8:	2302      	movs	r3, #2
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033de:	e04e      	b.n	800347e <UART_SetConfig+0x2e6>
 80033e0:	2304      	movs	r3, #4
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033e6:	e04a      	b.n	800347e <UART_SetConfig+0x2e6>
 80033e8:	2308      	movs	r3, #8
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ee:	e046      	b.n	800347e <UART_SetConfig+0x2e6>
 80033f0:	2310      	movs	r3, #16
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033f6:	e042      	b.n	800347e <UART_SetConfig+0x2e6>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a17      	ldr	r2, [pc, #92]	@ (800345c <UART_SetConfig+0x2c4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d13a      	bne.n	8003478 <UART_SetConfig+0x2e0>
 8003402:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <UART_SetConfig+0x2cc>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003408:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800340c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003410:	d01a      	beq.n	8003448 <UART_SetConfig+0x2b0>
 8003412:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003416:	d81b      	bhi.n	8003450 <UART_SetConfig+0x2b8>
 8003418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800341c:	d00c      	beq.n	8003438 <UART_SetConfig+0x2a0>
 800341e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003422:	d815      	bhi.n	8003450 <UART_SetConfig+0x2b8>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <UART_SetConfig+0x298>
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800342c:	d008      	beq.n	8003440 <UART_SetConfig+0x2a8>
 800342e:	e00f      	b.n	8003450 <UART_SetConfig+0x2b8>
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003436:	e022      	b.n	800347e <UART_SetConfig+0x2e6>
 8003438:	2302      	movs	r3, #2
 800343a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800343e:	e01e      	b.n	800347e <UART_SetConfig+0x2e6>
 8003440:	2304      	movs	r3, #4
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003446:	e01a      	b.n	800347e <UART_SetConfig+0x2e6>
 8003448:	2308      	movs	r3, #8
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800344e:	e016      	b.n	800347e <UART_SetConfig+0x2e6>
 8003450:	2310      	movs	r3, #16
 8003452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003456:	e012      	b.n	800347e <UART_SetConfig+0x2e6>
 8003458:	efff69f3 	.word	0xefff69f3
 800345c:	40008000 	.word	0x40008000
 8003460:	40013800 	.word	0x40013800
 8003464:	40021000 	.word	0x40021000
 8003468:	40004400 	.word	0x40004400
 800346c:	40004800 	.word	0x40004800
 8003470:	40004c00 	.word	0x40004c00
 8003474:	40005000 	.word	0x40005000
 8003478:	2310      	movs	r3, #16
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a9f      	ldr	r2, [pc, #636]	@ (8003700 <UART_SetConfig+0x568>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d17a      	bne.n	800357e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003488:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800348c:	2b08      	cmp	r3, #8
 800348e:	d824      	bhi.n	80034da <UART_SetConfig+0x342>
 8003490:	a201      	add	r2, pc, #4	@ (adr r2, 8003498 <UART_SetConfig+0x300>)
 8003492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003496:	bf00      	nop
 8003498:	080034bd 	.word	0x080034bd
 800349c:	080034db 	.word	0x080034db
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034db 	.word	0x080034db
 80034a8:	080034cb 	.word	0x080034cb
 80034ac:	080034db 	.word	0x080034db
 80034b0:	080034db 	.word	0x080034db
 80034b4:	080034db 	.word	0x080034db
 80034b8:	080034d3 	.word	0x080034d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034bc:	f7fe fcce 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 80034c0:	61f8      	str	r0, [r7, #28]
        break;
 80034c2:	e010      	b.n	80034e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003704 <UART_SetConfig+0x56c>)
 80034c6:	61fb      	str	r3, [r7, #28]
        break;
 80034c8:	e00d      	b.n	80034e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ca:	f7fe fc2f 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 80034ce:	61f8      	str	r0, [r7, #28]
        break;
 80034d0:	e009      	b.n	80034e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034d6:	61fb      	str	r3, [r7, #28]
        break;
 80034d8:	e005      	b.n	80034e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80fb 	beq.w	80036e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d305      	bcc.n	800350a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	429a      	cmp	r2, r3
 8003508:	d903      	bls.n	8003512 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003510:	e0e8      	b.n	80036e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2200      	movs	r2, #0
 8003516:	461c      	mov	r4, r3
 8003518:	4615      	mov	r5, r2
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	022b      	lsls	r3, r5, #8
 8003524:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003528:	0222      	lsls	r2, r4, #8
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	6849      	ldr	r1, [r1, #4]
 800352e:	0849      	lsrs	r1, r1, #1
 8003530:	2000      	movs	r0, #0
 8003532:	4688      	mov	r8, r1
 8003534:	4681      	mov	r9, r0
 8003536:	eb12 0a08 	adds.w	sl, r2, r8
 800353a:	eb43 0b09 	adc.w	fp, r3, r9
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800354c:	4650      	mov	r0, sl
 800354e:	4659      	mov	r1, fp
 8003550:	f7fc fe3a 	bl	80001c8 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4613      	mov	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003562:	d308      	bcc.n	8003576 <UART_SetConfig+0x3de>
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800356a:	d204      	bcs.n	8003576 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	e0b6      	b.n	80036e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800357c:	e0b2      	b.n	80036e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003586:	d15e      	bne.n	8003646 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003588:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800358c:	2b08      	cmp	r3, #8
 800358e:	d828      	bhi.n	80035e2 <UART_SetConfig+0x44a>
 8003590:	a201      	add	r2, pc, #4	@ (adr r2, 8003598 <UART_SetConfig+0x400>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035bd 	.word	0x080035bd
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	080035cd 	.word	0x080035cd
 80035a4:	080035e3 	.word	0x080035e3
 80035a8:	080035d3 	.word	0x080035d3
 80035ac:	080035e3 	.word	0x080035e3
 80035b0:	080035e3 	.word	0x080035e3
 80035b4:	080035e3 	.word	0x080035e3
 80035b8:	080035db 	.word	0x080035db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7fe fc4e 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 80035c0:	61f8      	str	r0, [r7, #28]
        break;
 80035c2:	e014      	b.n	80035ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c4:	f7fe fc60 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 80035c8:	61f8      	str	r0, [r7, #28]
        break;
 80035ca:	e010      	b.n	80035ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003704 <UART_SetConfig+0x56c>)
 80035ce:	61fb      	str	r3, [r7, #28]
        break;
 80035d0:	e00d      	b.n	80035ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d2:	f7fe fbab 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 80035d6:	61f8      	str	r0, [r7, #28]
        break;
 80035d8:	e009      	b.n	80035ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035de:	61fb      	str	r3, [r7, #28]
        break;
 80035e0:	e005      	b.n	80035ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d077      	beq.n	80036e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005a      	lsls	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	441a      	add	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b0f      	cmp	r3, #15
 800360e:	d916      	bls.n	800363e <UART_SetConfig+0x4a6>
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003616:	d212      	bcs.n	800363e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f023 030f 	bic.w	r3, r3, #15
 8003620:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	b29b      	uxth	r3, r3
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	b29a      	uxth	r2, r3
 800362e:	8afb      	ldrh	r3, [r7, #22]
 8003630:	4313      	orrs	r3, r2
 8003632:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	8afa      	ldrh	r2, [r7, #22]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	e052      	b.n	80036e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003644:	e04e      	b.n	80036e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003646:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800364a:	2b08      	cmp	r3, #8
 800364c:	d827      	bhi.n	800369e <UART_SetConfig+0x506>
 800364e:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <UART_SetConfig+0x4bc>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003679 	.word	0x08003679
 8003658:	08003681 	.word	0x08003681
 800365c:	08003689 	.word	0x08003689
 8003660:	0800369f 	.word	0x0800369f
 8003664:	0800368f 	.word	0x0800368f
 8003668:	0800369f 	.word	0x0800369f
 800366c:	0800369f 	.word	0x0800369f
 8003670:	0800369f 	.word	0x0800369f
 8003674:	08003697 	.word	0x08003697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7fe fbf0 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 800367c:	61f8      	str	r0, [r7, #28]
        break;
 800367e:	e014      	b.n	80036aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7fe fc02 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 8003684:	61f8      	str	r0, [r7, #28]
        break;
 8003686:	e010      	b.n	80036aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003688:	4b1e      	ldr	r3, [pc, #120]	@ (8003704 <UART_SetConfig+0x56c>)
 800368a:	61fb      	str	r3, [r7, #28]
        break;
 800368c:	e00d      	b.n	80036aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368e:	f7fe fb4d 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8003692:	61f8      	str	r0, [r7, #28]
        break;
 8003694:	e009      	b.n	80036aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800369a:	61fb      	str	r3, [r7, #28]
        break;
 800369c:	e005      	b.n	80036aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80036a8:	bf00      	nop
    }

    if (pclk != 0U)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d019      	beq.n	80036e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	085a      	lsrs	r2, r3, #1
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	441a      	add	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b0f      	cmp	r3, #15
 80036c8:	d909      	bls.n	80036de <UART_SetConfig+0x546>
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d0:	d205      	bcs.n	80036de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	e002      	b.n	80036e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3728      	adds	r7, #40	@ 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fe:	bf00      	nop
 8003700:	40008000 	.word	0x40008000
 8003704:	00f42400 	.word	0x00f42400

08003708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01a      	beq.n	800381e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003806:	d10a      	bne.n	800381e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b098      	sub	sp, #96	@ 0x60
 8003850:	af02      	add	r7, sp, #8
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800385c:	f7fd fa4e 	bl	8000cfc <HAL_GetTick>
 8003860:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b08      	cmp	r3, #8
 800386e:	d12e      	bne.n	80038ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f88c 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d021      	beq.n	80038ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800389a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800389e:	653b      	str	r3, [r7, #80]	@ 0x50
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e6      	bne.n	800388a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e062      	b.n	8003994 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d149      	bne.n	8003970 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e4:	2200      	movs	r2, #0
 80038e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f856 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d03c      	beq.n	8003970 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	623b      	str	r3, [r7, #32]
   return(result);
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800390a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003914:	633b      	str	r3, [r7, #48]	@ 0x30
 8003916:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800391a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e6      	bne.n	80038f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3308      	adds	r3, #8
 800392e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	60fb      	str	r3, [r7, #12]
   return(result);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003948:	61fa      	str	r2, [r7, #28]
 800394a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	617b      	str	r3, [r7, #20]
   return(result);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e5      	bne.n	8003928 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e011      	b.n	8003994 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3758      	adds	r7, #88	@ 0x58
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ac:	e04f      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d04b      	beq.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fd f9a1 	bl	8000cfc <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <UART_WaitOnFlagUntilTimeout+0x30>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e04e      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d037      	beq.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b80      	cmp	r3, #128	@ 0x80
 80039e2:	d034      	beq.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xb2>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b40      	cmp	r3, #64	@ 0x40
 80039e8:	d031      	beq.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d110      	bne.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2208      	movs	r2, #8
 80039fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f838 	bl	8003a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e029      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a28:	d111      	bne.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f81e 	bl	8003a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e00f      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4013      	ands	r3, r2
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	bf0c      	ite	eq
 8003a5e:	2301      	moveq	r3, #1
 8003a60:	2300      	movne	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d0a0      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b095      	sub	sp, #84	@ 0x54
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e6      	bne.n	8003a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3308      	adds	r3, #8
 8003ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ad0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e5      	bne.n	8003ab0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d118      	bne.n	8003b1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f023 0310 	bic.w	r3, r3, #16
 8003b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	6979      	ldr	r1, [r7, #20]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	613b      	str	r3, [r7, #16]
   return(result);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e6      	bne.n	8003aec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b32:	bf00      	nop
 8003b34:	3754      	adds	r7, #84	@ 0x54
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <std>:
 8003b40:	2300      	movs	r3, #0
 8003b42:	b510      	push	{r4, lr}
 8003b44:	4604      	mov	r4, r0
 8003b46:	e9c0 3300 	strd	r3, r3, [r0]
 8003b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b4e:	6083      	str	r3, [r0, #8]
 8003b50:	8181      	strh	r1, [r0, #12]
 8003b52:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b54:	81c2      	strh	r2, [r0, #14]
 8003b56:	6183      	str	r3, [r0, #24]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	305c      	adds	r0, #92	@ 0x5c
 8003b5e:	f000 f9e7 	bl	8003f30 <memset>
 8003b62:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <std+0x58>)
 8003b64:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <std+0x5c>)
 8003b68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba0 <std+0x60>)
 8003b6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <std+0x64>)
 8003b70:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <std+0x68>)
 8003b74:	6224      	str	r4, [r4, #32]
 8003b76:	429c      	cmp	r4, r3
 8003b78:	d006      	beq.n	8003b88 <std+0x48>
 8003b7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b7e:	4294      	cmp	r4, r2
 8003b80:	d002      	beq.n	8003b88 <std+0x48>
 8003b82:	33d0      	adds	r3, #208	@ 0xd0
 8003b84:	429c      	cmp	r4, r3
 8003b86:	d105      	bne.n	8003b94 <std+0x54>
 8003b88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b90:	f000 ba46 	b.w	8004020 <__retarget_lock_init_recursive>
 8003b94:	bd10      	pop	{r4, pc}
 8003b96:	bf00      	nop
 8003b98:	08003d81 	.word	0x08003d81
 8003b9c:	08003da3 	.word	0x08003da3
 8003ba0:	08003ddb 	.word	0x08003ddb
 8003ba4:	08003dff 	.word	0x08003dff
 8003ba8:	20000178 	.word	0x20000178

08003bac <stdio_exit_handler>:
 8003bac:	4a02      	ldr	r2, [pc, #8]	@ (8003bb8 <stdio_exit_handler+0xc>)
 8003bae:	4903      	ldr	r1, [pc, #12]	@ (8003bbc <stdio_exit_handler+0x10>)
 8003bb0:	4803      	ldr	r0, [pc, #12]	@ (8003bc0 <stdio_exit_handler+0x14>)
 8003bb2:	f000 b869 	b.w	8003c88 <_fwalk_sglue>
 8003bb6:	bf00      	nop
 8003bb8:	2000000c 	.word	0x2000000c
 8003bbc:	08004321 	.word	0x08004321
 8003bc0:	2000001c 	.word	0x2000001c

08003bc4 <cleanup_stdio>:
 8003bc4:	6841      	ldr	r1, [r0, #4]
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <cleanup_stdio+0x34>)
 8003bc8:	4299      	cmp	r1, r3
 8003bca:	b510      	push	{r4, lr}
 8003bcc:	4604      	mov	r4, r0
 8003bce:	d001      	beq.n	8003bd4 <cleanup_stdio+0x10>
 8003bd0:	f000 fba6 	bl	8004320 <_fflush_r>
 8003bd4:	68a1      	ldr	r1, [r4, #8]
 8003bd6:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <cleanup_stdio+0x38>)
 8003bd8:	4299      	cmp	r1, r3
 8003bda:	d002      	beq.n	8003be2 <cleanup_stdio+0x1e>
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f000 fb9f 	bl	8004320 <_fflush_r>
 8003be2:	68e1      	ldr	r1, [r4, #12]
 8003be4:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <cleanup_stdio+0x3c>)
 8003be6:	4299      	cmp	r1, r3
 8003be8:	d004      	beq.n	8003bf4 <cleanup_stdio+0x30>
 8003bea:	4620      	mov	r0, r4
 8003bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf0:	f000 bb96 	b.w	8004320 <_fflush_r>
 8003bf4:	bd10      	pop	{r4, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000178 	.word	0x20000178
 8003bfc:	200001e0 	.word	0x200001e0
 8003c00:	20000248 	.word	0x20000248

08003c04 <global_stdio_init.part.0>:
 8003c04:	b510      	push	{r4, lr}
 8003c06:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <global_stdio_init.part.0+0x30>)
 8003c08:	4c0b      	ldr	r4, [pc, #44]	@ (8003c38 <global_stdio_init.part.0+0x34>)
 8003c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c3c <global_stdio_init.part.0+0x38>)
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	4620      	mov	r0, r4
 8003c10:	2200      	movs	r2, #0
 8003c12:	2104      	movs	r1, #4
 8003c14:	f7ff ff94 	bl	8003b40 <std>
 8003c18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	2109      	movs	r1, #9
 8003c20:	f7ff ff8e 	bl	8003b40 <std>
 8003c24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c28:	2202      	movs	r2, #2
 8003c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c2e:	2112      	movs	r1, #18
 8003c30:	f7ff bf86 	b.w	8003b40 <std>
 8003c34:	200002b0 	.word	0x200002b0
 8003c38:	20000178 	.word	0x20000178
 8003c3c:	08003bad 	.word	0x08003bad

08003c40 <__sfp_lock_acquire>:
 8003c40:	4801      	ldr	r0, [pc, #4]	@ (8003c48 <__sfp_lock_acquire+0x8>)
 8003c42:	f000 b9ee 	b.w	8004022 <__retarget_lock_acquire_recursive>
 8003c46:	bf00      	nop
 8003c48:	200002b9 	.word	0x200002b9

08003c4c <__sfp_lock_release>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	@ (8003c54 <__sfp_lock_release+0x8>)
 8003c4e:	f000 b9e9 	b.w	8004024 <__retarget_lock_release_recursive>
 8003c52:	bf00      	nop
 8003c54:	200002b9 	.word	0x200002b9

08003c58 <__sinit>:
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	f7ff fff0 	bl	8003c40 <__sfp_lock_acquire>
 8003c60:	6a23      	ldr	r3, [r4, #32]
 8003c62:	b11b      	cbz	r3, 8003c6c <__sinit+0x14>
 8003c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c68:	f7ff bff0 	b.w	8003c4c <__sfp_lock_release>
 8003c6c:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <__sinit+0x28>)
 8003c6e:	6223      	str	r3, [r4, #32]
 8003c70:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <__sinit+0x2c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f5      	bne.n	8003c64 <__sinit+0xc>
 8003c78:	f7ff ffc4 	bl	8003c04 <global_stdio_init.part.0>
 8003c7c:	e7f2      	b.n	8003c64 <__sinit+0xc>
 8003c7e:	bf00      	nop
 8003c80:	08003bc5 	.word	0x08003bc5
 8003c84:	200002b0 	.word	0x200002b0

08003c88 <_fwalk_sglue>:
 8003c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c8c:	4607      	mov	r7, r0
 8003c8e:	4688      	mov	r8, r1
 8003c90:	4614      	mov	r4, r2
 8003c92:	2600      	movs	r6, #0
 8003c94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c98:	f1b9 0901 	subs.w	r9, r9, #1
 8003c9c:	d505      	bpl.n	8003caa <_fwalk_sglue+0x22>
 8003c9e:	6824      	ldr	r4, [r4, #0]
 8003ca0:	2c00      	cmp	r4, #0
 8003ca2:	d1f7      	bne.n	8003c94 <_fwalk_sglue+0xc>
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003caa:	89ab      	ldrh	r3, [r5, #12]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d907      	bls.n	8003cc0 <_fwalk_sglue+0x38>
 8003cb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	d003      	beq.n	8003cc0 <_fwalk_sglue+0x38>
 8003cb8:	4629      	mov	r1, r5
 8003cba:	4638      	mov	r0, r7
 8003cbc:	47c0      	blx	r8
 8003cbe:	4306      	orrs	r6, r0
 8003cc0:	3568      	adds	r5, #104	@ 0x68
 8003cc2:	e7e9      	b.n	8003c98 <_fwalk_sglue+0x10>

08003cc4 <_puts_r>:
 8003cc4:	6a03      	ldr	r3, [r0, #32]
 8003cc6:	b570      	push	{r4, r5, r6, lr}
 8003cc8:	6884      	ldr	r4, [r0, #8]
 8003cca:	4605      	mov	r5, r0
 8003ccc:	460e      	mov	r6, r1
 8003cce:	b90b      	cbnz	r3, 8003cd4 <_puts_r+0x10>
 8003cd0:	f7ff ffc2 	bl	8003c58 <__sinit>
 8003cd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cd6:	07db      	lsls	r3, r3, #31
 8003cd8:	d405      	bmi.n	8003ce6 <_puts_r+0x22>
 8003cda:	89a3      	ldrh	r3, [r4, #12]
 8003cdc:	0598      	lsls	r0, r3, #22
 8003cde:	d402      	bmi.n	8003ce6 <_puts_r+0x22>
 8003ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ce2:	f000 f99e 	bl	8004022 <__retarget_lock_acquire_recursive>
 8003ce6:	89a3      	ldrh	r3, [r4, #12]
 8003ce8:	0719      	lsls	r1, r3, #28
 8003cea:	d502      	bpl.n	8003cf2 <_puts_r+0x2e>
 8003cec:	6923      	ldr	r3, [r4, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d135      	bne.n	8003d5e <_puts_r+0x9a>
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f000 f8c5 	bl	8003e84 <__swsetup_r>
 8003cfa:	b380      	cbz	r0, 8003d5e <_puts_r+0x9a>
 8003cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8003d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d02:	07da      	lsls	r2, r3, #31
 8003d04:	d405      	bmi.n	8003d12 <_puts_r+0x4e>
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	059b      	lsls	r3, r3, #22
 8003d0a:	d402      	bmi.n	8003d12 <_puts_r+0x4e>
 8003d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d0e:	f000 f989 	bl	8004024 <__retarget_lock_release_recursive>
 8003d12:	4628      	mov	r0, r5
 8003d14:	bd70      	pop	{r4, r5, r6, pc}
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	da04      	bge.n	8003d24 <_puts_r+0x60>
 8003d1a:	69a2      	ldr	r2, [r4, #24]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	dc17      	bgt.n	8003d50 <_puts_r+0x8c>
 8003d20:	290a      	cmp	r1, #10
 8003d22:	d015      	beq.n	8003d50 <_puts_r+0x8c>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	6022      	str	r2, [r4, #0]
 8003d2a:	7019      	strb	r1, [r3, #0]
 8003d2c:	68a3      	ldr	r3, [r4, #8]
 8003d2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d32:	3b01      	subs	r3, #1
 8003d34:	60a3      	str	r3, [r4, #8]
 8003d36:	2900      	cmp	r1, #0
 8003d38:	d1ed      	bne.n	8003d16 <_puts_r+0x52>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	da11      	bge.n	8003d62 <_puts_r+0x9e>
 8003d3e:	4622      	mov	r2, r4
 8003d40:	210a      	movs	r1, #10
 8003d42:	4628      	mov	r0, r5
 8003d44:	f000 f85f 	bl	8003e06 <__swbuf_r>
 8003d48:	3001      	adds	r0, #1
 8003d4a:	d0d7      	beq.n	8003cfc <_puts_r+0x38>
 8003d4c:	250a      	movs	r5, #10
 8003d4e:	e7d7      	b.n	8003d00 <_puts_r+0x3c>
 8003d50:	4622      	mov	r2, r4
 8003d52:	4628      	mov	r0, r5
 8003d54:	f000 f857 	bl	8003e06 <__swbuf_r>
 8003d58:	3001      	adds	r0, #1
 8003d5a:	d1e7      	bne.n	8003d2c <_puts_r+0x68>
 8003d5c:	e7ce      	b.n	8003cfc <_puts_r+0x38>
 8003d5e:	3e01      	subs	r6, #1
 8003d60:	e7e4      	b.n	8003d2c <_puts_r+0x68>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	6022      	str	r2, [r4, #0]
 8003d68:	220a      	movs	r2, #10
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e7ee      	b.n	8003d4c <_puts_r+0x88>
	...

08003d70 <puts>:
 8003d70:	4b02      	ldr	r3, [pc, #8]	@ (8003d7c <puts+0xc>)
 8003d72:	4601      	mov	r1, r0
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	f7ff bfa5 	b.w	8003cc4 <_puts_r>
 8003d7a:	bf00      	nop
 8003d7c:	20000018 	.word	0x20000018

08003d80 <__sread>:
 8003d80:	b510      	push	{r4, lr}
 8003d82:	460c      	mov	r4, r1
 8003d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d88:	f000 f8fc 	bl	8003f84 <_read_r>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	bfab      	itete	ge
 8003d90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d92:	89a3      	ldrhlt	r3, [r4, #12]
 8003d94:	181b      	addge	r3, r3, r0
 8003d96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d9a:	bfac      	ite	ge
 8003d9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d9e:	81a3      	strhlt	r3, [r4, #12]
 8003da0:	bd10      	pop	{r4, pc}

08003da2 <__swrite>:
 8003da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da6:	461f      	mov	r7, r3
 8003da8:	898b      	ldrh	r3, [r1, #12]
 8003daa:	05db      	lsls	r3, r3, #23
 8003dac:	4605      	mov	r5, r0
 8003dae:	460c      	mov	r4, r1
 8003db0:	4616      	mov	r6, r2
 8003db2:	d505      	bpl.n	8003dc0 <__swrite+0x1e>
 8003db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db8:	2302      	movs	r3, #2
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f000 f8d0 	bl	8003f60 <_lseek_r>
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dca:	81a3      	strh	r3, [r4, #12]
 8003dcc:	4632      	mov	r2, r6
 8003dce:	463b      	mov	r3, r7
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd6:	f000 b8e7 	b.w	8003fa8 <_write_r>

08003dda <__sseek>:
 8003dda:	b510      	push	{r4, lr}
 8003ddc:	460c      	mov	r4, r1
 8003dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de2:	f000 f8bd 	bl	8003f60 <_lseek_r>
 8003de6:	1c43      	adds	r3, r0, #1
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	bf15      	itete	ne
 8003dec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003dee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003df2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003df6:	81a3      	strheq	r3, [r4, #12]
 8003df8:	bf18      	it	ne
 8003dfa:	81a3      	strhne	r3, [r4, #12]
 8003dfc:	bd10      	pop	{r4, pc}

08003dfe <__sclose>:
 8003dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e02:	f000 b89d 	b.w	8003f40 <_close_r>

08003e06 <__swbuf_r>:
 8003e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e08:	460e      	mov	r6, r1
 8003e0a:	4614      	mov	r4, r2
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	b118      	cbz	r0, 8003e18 <__swbuf_r+0x12>
 8003e10:	6a03      	ldr	r3, [r0, #32]
 8003e12:	b90b      	cbnz	r3, 8003e18 <__swbuf_r+0x12>
 8003e14:	f7ff ff20 	bl	8003c58 <__sinit>
 8003e18:	69a3      	ldr	r3, [r4, #24]
 8003e1a:	60a3      	str	r3, [r4, #8]
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	071a      	lsls	r2, r3, #28
 8003e20:	d501      	bpl.n	8003e26 <__swbuf_r+0x20>
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	b943      	cbnz	r3, 8003e38 <__swbuf_r+0x32>
 8003e26:	4621      	mov	r1, r4
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f000 f82b 	bl	8003e84 <__swsetup_r>
 8003e2e:	b118      	cbz	r0, 8003e38 <__swbuf_r+0x32>
 8003e30:	f04f 37ff 	mov.w	r7, #4294967295
 8003e34:	4638      	mov	r0, r7
 8003e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	6922      	ldr	r2, [r4, #16]
 8003e3c:	1a98      	subs	r0, r3, r2
 8003e3e:	6963      	ldr	r3, [r4, #20]
 8003e40:	b2f6      	uxtb	r6, r6
 8003e42:	4283      	cmp	r3, r0
 8003e44:	4637      	mov	r7, r6
 8003e46:	dc05      	bgt.n	8003e54 <__swbuf_r+0x4e>
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f000 fa68 	bl	8004320 <_fflush_r>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d1ed      	bne.n	8003e30 <__swbuf_r+0x2a>
 8003e54:	68a3      	ldr	r3, [r4, #8]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	60a3      	str	r3, [r4, #8]
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	6022      	str	r2, [r4, #0]
 8003e60:	701e      	strb	r6, [r3, #0]
 8003e62:	6962      	ldr	r2, [r4, #20]
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d004      	beq.n	8003e74 <__swbuf_r+0x6e>
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	07db      	lsls	r3, r3, #31
 8003e6e:	d5e1      	bpl.n	8003e34 <__swbuf_r+0x2e>
 8003e70:	2e0a      	cmp	r6, #10
 8003e72:	d1df      	bne.n	8003e34 <__swbuf_r+0x2e>
 8003e74:	4621      	mov	r1, r4
 8003e76:	4628      	mov	r0, r5
 8003e78:	f000 fa52 	bl	8004320 <_fflush_r>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d0d9      	beq.n	8003e34 <__swbuf_r+0x2e>
 8003e80:	e7d6      	b.n	8003e30 <__swbuf_r+0x2a>
	...

08003e84 <__swsetup_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4b29      	ldr	r3, [pc, #164]	@ (8003f2c <__swsetup_r+0xa8>)
 8003e88:	4605      	mov	r5, r0
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	b118      	cbz	r0, 8003e98 <__swsetup_r+0x14>
 8003e90:	6a03      	ldr	r3, [r0, #32]
 8003e92:	b90b      	cbnz	r3, 8003e98 <__swsetup_r+0x14>
 8003e94:	f7ff fee0 	bl	8003c58 <__sinit>
 8003e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e9c:	0719      	lsls	r1, r3, #28
 8003e9e:	d422      	bmi.n	8003ee6 <__swsetup_r+0x62>
 8003ea0:	06da      	lsls	r2, r3, #27
 8003ea2:	d407      	bmi.n	8003eb4 <__swsetup_r+0x30>
 8003ea4:	2209      	movs	r2, #9
 8003ea6:	602a      	str	r2, [r5, #0]
 8003ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb2:	e033      	b.n	8003f1c <__swsetup_r+0x98>
 8003eb4:	0758      	lsls	r0, r3, #29
 8003eb6:	d512      	bpl.n	8003ede <__swsetup_r+0x5a>
 8003eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003eba:	b141      	cbz	r1, 8003ece <__swsetup_r+0x4a>
 8003ebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	d002      	beq.n	8003eca <__swsetup_r+0x46>
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	f000 f8af 	bl	8004028 <_free_r>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ed4:	81a3      	strh	r3, [r4, #12]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	6063      	str	r3, [r4, #4]
 8003eda:	6923      	ldr	r3, [r4, #16]
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	89a3      	ldrh	r3, [r4, #12]
 8003ee0:	f043 0308 	orr.w	r3, r3, #8
 8003ee4:	81a3      	strh	r3, [r4, #12]
 8003ee6:	6923      	ldr	r3, [r4, #16]
 8003ee8:	b94b      	cbnz	r3, 8003efe <__swsetup_r+0x7a>
 8003eea:	89a3      	ldrh	r3, [r4, #12]
 8003eec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ef4:	d003      	beq.n	8003efe <__swsetup_r+0x7a>
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	4628      	mov	r0, r5
 8003efa:	f000 fa5f 	bl	80043bc <__smakebuf_r>
 8003efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f02:	f013 0201 	ands.w	r2, r3, #1
 8003f06:	d00a      	beq.n	8003f1e <__swsetup_r+0x9a>
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60a2      	str	r2, [r4, #8]
 8003f0c:	6962      	ldr	r2, [r4, #20]
 8003f0e:	4252      	negs	r2, r2
 8003f10:	61a2      	str	r2, [r4, #24]
 8003f12:	6922      	ldr	r2, [r4, #16]
 8003f14:	b942      	cbnz	r2, 8003f28 <__swsetup_r+0xa4>
 8003f16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f1a:	d1c5      	bne.n	8003ea8 <__swsetup_r+0x24>
 8003f1c:	bd38      	pop	{r3, r4, r5, pc}
 8003f1e:	0799      	lsls	r1, r3, #30
 8003f20:	bf58      	it	pl
 8003f22:	6962      	ldrpl	r2, [r4, #20]
 8003f24:	60a2      	str	r2, [r4, #8]
 8003f26:	e7f4      	b.n	8003f12 <__swsetup_r+0x8e>
 8003f28:	2000      	movs	r0, #0
 8003f2a:	e7f7      	b.n	8003f1c <__swsetup_r+0x98>
 8003f2c:	20000018 	.word	0x20000018

08003f30 <memset>:
 8003f30:	4402      	add	r2, r0
 8003f32:	4603      	mov	r3, r0
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d100      	bne.n	8003f3a <memset+0xa>
 8003f38:	4770      	bx	lr
 8003f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3e:	e7f9      	b.n	8003f34 <memset+0x4>

08003f40 <_close_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4d06      	ldr	r5, [pc, #24]	@ (8003f5c <_close_r+0x1c>)
 8003f44:	2300      	movs	r3, #0
 8003f46:	4604      	mov	r4, r0
 8003f48:	4608      	mov	r0, r1
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	f7fc fdc0 	bl	8000ad0 <_close>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	d102      	bne.n	8003f5a <_close_r+0x1a>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	b103      	cbz	r3, 8003f5a <_close_r+0x1a>
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	200002b4 	.word	0x200002b4

08003f60 <_lseek_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	4d07      	ldr	r5, [pc, #28]	@ (8003f80 <_lseek_r+0x20>)
 8003f64:	4604      	mov	r4, r0
 8003f66:	4608      	mov	r0, r1
 8003f68:	4611      	mov	r1, r2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	602a      	str	r2, [r5, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f7fc fdd5 	bl	8000b1e <_lseek>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d102      	bne.n	8003f7e <_lseek_r+0x1e>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	b103      	cbz	r3, 8003f7e <_lseek_r+0x1e>
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	200002b4 	.word	0x200002b4

08003f84 <_read_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4d07      	ldr	r5, [pc, #28]	@ (8003fa4 <_read_r+0x20>)
 8003f88:	4604      	mov	r4, r0
 8003f8a:	4608      	mov	r0, r1
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	2200      	movs	r2, #0
 8003f90:	602a      	str	r2, [r5, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f7fc fd63 	bl	8000a5e <_read>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_read_r+0x1e>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_read_r+0x1e>
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	200002b4 	.word	0x200002b4

08003fa8 <_write_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	4d07      	ldr	r5, [pc, #28]	@ (8003fc8 <_write_r+0x20>)
 8003fac:	4604      	mov	r4, r0
 8003fae:	4608      	mov	r0, r1
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	602a      	str	r2, [r5, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f7fc fd6e 	bl	8000a98 <_write>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d102      	bne.n	8003fc6 <_write_r+0x1e>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_write_r+0x1e>
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	200002b4 	.word	0x200002b4

08003fcc <__errno>:
 8003fcc:	4b01      	ldr	r3, [pc, #4]	@ (8003fd4 <__errno+0x8>)
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000018 	.word	0x20000018

08003fd8 <__libc_init_array>:
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	4d0d      	ldr	r5, [pc, #52]	@ (8004010 <__libc_init_array+0x38>)
 8003fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8004014 <__libc_init_array+0x3c>)
 8003fde:	1b64      	subs	r4, r4, r5
 8003fe0:	10a4      	asrs	r4, r4, #2
 8003fe2:	2600      	movs	r6, #0
 8003fe4:	42a6      	cmp	r6, r4
 8003fe6:	d109      	bne.n	8003ffc <__libc_init_array+0x24>
 8003fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8004018 <__libc_init_array+0x40>)
 8003fea:	4c0c      	ldr	r4, [pc, #48]	@ (800401c <__libc_init_array+0x44>)
 8003fec:	f000 fa54 	bl	8004498 <_init>
 8003ff0:	1b64      	subs	r4, r4, r5
 8003ff2:	10a4      	asrs	r4, r4, #2
 8003ff4:	2600      	movs	r6, #0
 8003ff6:	42a6      	cmp	r6, r4
 8003ff8:	d105      	bne.n	8004006 <__libc_init_array+0x2e>
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004000:	4798      	blx	r3
 8004002:	3601      	adds	r6, #1
 8004004:	e7ee      	b.n	8003fe4 <__libc_init_array+0xc>
 8004006:	f855 3b04 	ldr.w	r3, [r5], #4
 800400a:	4798      	blx	r3
 800400c:	3601      	adds	r6, #1
 800400e:	e7f2      	b.n	8003ff6 <__libc_init_array+0x1e>
 8004010:	0800451c 	.word	0x0800451c
 8004014:	0800451c 	.word	0x0800451c
 8004018:	0800451c 	.word	0x0800451c
 800401c:	08004520 	.word	0x08004520

08004020 <__retarget_lock_init_recursive>:
 8004020:	4770      	bx	lr

08004022 <__retarget_lock_acquire_recursive>:
 8004022:	4770      	bx	lr

08004024 <__retarget_lock_release_recursive>:
 8004024:	4770      	bx	lr
	...

08004028 <_free_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4605      	mov	r5, r0
 800402c:	2900      	cmp	r1, #0
 800402e:	d041      	beq.n	80040b4 <_free_r+0x8c>
 8004030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004034:	1f0c      	subs	r4, r1, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	bfb8      	it	lt
 800403a:	18e4      	addlt	r4, r4, r3
 800403c:	f000 f8e0 	bl	8004200 <__malloc_lock>
 8004040:	4a1d      	ldr	r2, [pc, #116]	@ (80040b8 <_free_r+0x90>)
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	b933      	cbnz	r3, 8004054 <_free_r+0x2c>
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	6014      	str	r4, [r2, #0]
 800404a:	4628      	mov	r0, r5
 800404c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004050:	f000 b8dc 	b.w	800420c <__malloc_unlock>
 8004054:	42a3      	cmp	r3, r4
 8004056:	d908      	bls.n	800406a <_free_r+0x42>
 8004058:	6820      	ldr	r0, [r4, #0]
 800405a:	1821      	adds	r1, r4, r0
 800405c:	428b      	cmp	r3, r1
 800405e:	bf01      	itttt	eq
 8004060:	6819      	ldreq	r1, [r3, #0]
 8004062:	685b      	ldreq	r3, [r3, #4]
 8004064:	1809      	addeq	r1, r1, r0
 8004066:	6021      	streq	r1, [r4, #0]
 8004068:	e7ed      	b.n	8004046 <_free_r+0x1e>
 800406a:	461a      	mov	r2, r3
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	b10b      	cbz	r3, 8004074 <_free_r+0x4c>
 8004070:	42a3      	cmp	r3, r4
 8004072:	d9fa      	bls.n	800406a <_free_r+0x42>
 8004074:	6811      	ldr	r1, [r2, #0]
 8004076:	1850      	adds	r0, r2, r1
 8004078:	42a0      	cmp	r0, r4
 800407a:	d10b      	bne.n	8004094 <_free_r+0x6c>
 800407c:	6820      	ldr	r0, [r4, #0]
 800407e:	4401      	add	r1, r0
 8004080:	1850      	adds	r0, r2, r1
 8004082:	4283      	cmp	r3, r0
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	d1e0      	bne.n	800404a <_free_r+0x22>
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	6053      	str	r3, [r2, #4]
 800408e:	4408      	add	r0, r1
 8004090:	6010      	str	r0, [r2, #0]
 8004092:	e7da      	b.n	800404a <_free_r+0x22>
 8004094:	d902      	bls.n	800409c <_free_r+0x74>
 8004096:	230c      	movs	r3, #12
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	e7d6      	b.n	800404a <_free_r+0x22>
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	1821      	adds	r1, r4, r0
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf04      	itt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	6063      	str	r3, [r4, #4]
 80040aa:	bf04      	itt	eq
 80040ac:	1809      	addeq	r1, r1, r0
 80040ae:	6021      	streq	r1, [r4, #0]
 80040b0:	6054      	str	r4, [r2, #4]
 80040b2:	e7ca      	b.n	800404a <_free_r+0x22>
 80040b4:	bd38      	pop	{r3, r4, r5, pc}
 80040b6:	bf00      	nop
 80040b8:	200002c0 	.word	0x200002c0

080040bc <sbrk_aligned>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4e0f      	ldr	r6, [pc, #60]	@ (80040fc <sbrk_aligned+0x40>)
 80040c0:	460c      	mov	r4, r1
 80040c2:	6831      	ldr	r1, [r6, #0]
 80040c4:	4605      	mov	r5, r0
 80040c6:	b911      	cbnz	r1, 80040ce <sbrk_aligned+0x12>
 80040c8:	f000 f9d6 	bl	8004478 <_sbrk_r>
 80040cc:	6030      	str	r0, [r6, #0]
 80040ce:	4621      	mov	r1, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 f9d1 	bl	8004478 <_sbrk_r>
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	d103      	bne.n	80040e2 <sbrk_aligned+0x26>
 80040da:	f04f 34ff 	mov.w	r4, #4294967295
 80040de:	4620      	mov	r0, r4
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
 80040e2:	1cc4      	adds	r4, r0, #3
 80040e4:	f024 0403 	bic.w	r4, r4, #3
 80040e8:	42a0      	cmp	r0, r4
 80040ea:	d0f8      	beq.n	80040de <sbrk_aligned+0x22>
 80040ec:	1a21      	subs	r1, r4, r0
 80040ee:	4628      	mov	r0, r5
 80040f0:	f000 f9c2 	bl	8004478 <_sbrk_r>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d1f2      	bne.n	80040de <sbrk_aligned+0x22>
 80040f8:	e7ef      	b.n	80040da <sbrk_aligned+0x1e>
 80040fa:	bf00      	nop
 80040fc:	200002bc 	.word	0x200002bc

08004100 <_malloc_r>:
 8004100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004104:	1ccd      	adds	r5, r1, #3
 8004106:	f025 0503 	bic.w	r5, r5, #3
 800410a:	3508      	adds	r5, #8
 800410c:	2d0c      	cmp	r5, #12
 800410e:	bf38      	it	cc
 8004110:	250c      	movcc	r5, #12
 8004112:	2d00      	cmp	r5, #0
 8004114:	4606      	mov	r6, r0
 8004116:	db01      	blt.n	800411c <_malloc_r+0x1c>
 8004118:	42a9      	cmp	r1, r5
 800411a:	d904      	bls.n	8004126 <_malloc_r+0x26>
 800411c:	230c      	movs	r3, #12
 800411e:	6033      	str	r3, [r6, #0]
 8004120:	2000      	movs	r0, #0
 8004122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004126:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041fc <_malloc_r+0xfc>
 800412a:	f000 f869 	bl	8004200 <__malloc_lock>
 800412e:	f8d8 3000 	ldr.w	r3, [r8]
 8004132:	461c      	mov	r4, r3
 8004134:	bb44      	cbnz	r4, 8004188 <_malloc_r+0x88>
 8004136:	4629      	mov	r1, r5
 8004138:	4630      	mov	r0, r6
 800413a:	f7ff ffbf 	bl	80040bc <sbrk_aligned>
 800413e:	1c43      	adds	r3, r0, #1
 8004140:	4604      	mov	r4, r0
 8004142:	d158      	bne.n	80041f6 <_malloc_r+0xf6>
 8004144:	f8d8 4000 	ldr.w	r4, [r8]
 8004148:	4627      	mov	r7, r4
 800414a:	2f00      	cmp	r7, #0
 800414c:	d143      	bne.n	80041d6 <_malloc_r+0xd6>
 800414e:	2c00      	cmp	r4, #0
 8004150:	d04b      	beq.n	80041ea <_malloc_r+0xea>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	4639      	mov	r1, r7
 8004156:	4630      	mov	r0, r6
 8004158:	eb04 0903 	add.w	r9, r4, r3
 800415c:	f000 f98c 	bl	8004478 <_sbrk_r>
 8004160:	4581      	cmp	r9, r0
 8004162:	d142      	bne.n	80041ea <_malloc_r+0xea>
 8004164:	6821      	ldr	r1, [r4, #0]
 8004166:	1a6d      	subs	r5, r5, r1
 8004168:	4629      	mov	r1, r5
 800416a:	4630      	mov	r0, r6
 800416c:	f7ff ffa6 	bl	80040bc <sbrk_aligned>
 8004170:	3001      	adds	r0, #1
 8004172:	d03a      	beq.n	80041ea <_malloc_r+0xea>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	442b      	add	r3, r5
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	f8d8 3000 	ldr.w	r3, [r8]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	bb62      	cbnz	r2, 80041dc <_malloc_r+0xdc>
 8004182:	f8c8 7000 	str.w	r7, [r8]
 8004186:	e00f      	b.n	80041a8 <_malloc_r+0xa8>
 8004188:	6822      	ldr	r2, [r4, #0]
 800418a:	1b52      	subs	r2, r2, r5
 800418c:	d420      	bmi.n	80041d0 <_malloc_r+0xd0>
 800418e:	2a0b      	cmp	r2, #11
 8004190:	d917      	bls.n	80041c2 <_malloc_r+0xc2>
 8004192:	1961      	adds	r1, r4, r5
 8004194:	42a3      	cmp	r3, r4
 8004196:	6025      	str	r5, [r4, #0]
 8004198:	bf18      	it	ne
 800419a:	6059      	strne	r1, [r3, #4]
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	bf08      	it	eq
 80041a0:	f8c8 1000 	streq.w	r1, [r8]
 80041a4:	5162      	str	r2, [r4, r5]
 80041a6:	604b      	str	r3, [r1, #4]
 80041a8:	4630      	mov	r0, r6
 80041aa:	f000 f82f 	bl	800420c <__malloc_unlock>
 80041ae:	f104 000b 	add.w	r0, r4, #11
 80041b2:	1d23      	adds	r3, r4, #4
 80041b4:	f020 0007 	bic.w	r0, r0, #7
 80041b8:	1ac2      	subs	r2, r0, r3
 80041ba:	bf1c      	itt	ne
 80041bc:	1a1b      	subne	r3, r3, r0
 80041be:	50a3      	strne	r3, [r4, r2]
 80041c0:	e7af      	b.n	8004122 <_malloc_r+0x22>
 80041c2:	6862      	ldr	r2, [r4, #4]
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	bf0c      	ite	eq
 80041c8:	f8c8 2000 	streq.w	r2, [r8]
 80041cc:	605a      	strne	r2, [r3, #4]
 80041ce:	e7eb      	b.n	80041a8 <_malloc_r+0xa8>
 80041d0:	4623      	mov	r3, r4
 80041d2:	6864      	ldr	r4, [r4, #4]
 80041d4:	e7ae      	b.n	8004134 <_malloc_r+0x34>
 80041d6:	463c      	mov	r4, r7
 80041d8:	687f      	ldr	r7, [r7, #4]
 80041da:	e7b6      	b.n	800414a <_malloc_r+0x4a>
 80041dc:	461a      	mov	r2, r3
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	d1fb      	bne.n	80041dc <_malloc_r+0xdc>
 80041e4:	2300      	movs	r3, #0
 80041e6:	6053      	str	r3, [r2, #4]
 80041e8:	e7de      	b.n	80041a8 <_malloc_r+0xa8>
 80041ea:	230c      	movs	r3, #12
 80041ec:	6033      	str	r3, [r6, #0]
 80041ee:	4630      	mov	r0, r6
 80041f0:	f000 f80c 	bl	800420c <__malloc_unlock>
 80041f4:	e794      	b.n	8004120 <_malloc_r+0x20>
 80041f6:	6005      	str	r5, [r0, #0]
 80041f8:	e7d6      	b.n	80041a8 <_malloc_r+0xa8>
 80041fa:	bf00      	nop
 80041fc:	200002c0 	.word	0x200002c0

08004200 <__malloc_lock>:
 8004200:	4801      	ldr	r0, [pc, #4]	@ (8004208 <__malloc_lock+0x8>)
 8004202:	f7ff bf0e 	b.w	8004022 <__retarget_lock_acquire_recursive>
 8004206:	bf00      	nop
 8004208:	200002b8 	.word	0x200002b8

0800420c <__malloc_unlock>:
 800420c:	4801      	ldr	r0, [pc, #4]	@ (8004214 <__malloc_unlock+0x8>)
 800420e:	f7ff bf09 	b.w	8004024 <__retarget_lock_release_recursive>
 8004212:	bf00      	nop
 8004214:	200002b8 	.word	0x200002b8

08004218 <__sflush_r>:
 8004218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004220:	0716      	lsls	r6, r2, #28
 8004222:	4605      	mov	r5, r0
 8004224:	460c      	mov	r4, r1
 8004226:	d454      	bmi.n	80042d2 <__sflush_r+0xba>
 8004228:	684b      	ldr	r3, [r1, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	dc02      	bgt.n	8004234 <__sflush_r+0x1c>
 800422e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	dd48      	ble.n	80042c6 <__sflush_r+0xae>
 8004234:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004236:	2e00      	cmp	r6, #0
 8004238:	d045      	beq.n	80042c6 <__sflush_r+0xae>
 800423a:	2300      	movs	r3, #0
 800423c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004240:	682f      	ldr	r7, [r5, #0]
 8004242:	6a21      	ldr	r1, [r4, #32]
 8004244:	602b      	str	r3, [r5, #0]
 8004246:	d030      	beq.n	80042aa <__sflush_r+0x92>
 8004248:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800424a:	89a3      	ldrh	r3, [r4, #12]
 800424c:	0759      	lsls	r1, r3, #29
 800424e:	d505      	bpl.n	800425c <__sflush_r+0x44>
 8004250:	6863      	ldr	r3, [r4, #4]
 8004252:	1ad2      	subs	r2, r2, r3
 8004254:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004256:	b10b      	cbz	r3, 800425c <__sflush_r+0x44>
 8004258:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	2300      	movs	r3, #0
 800425e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004260:	6a21      	ldr	r1, [r4, #32]
 8004262:	4628      	mov	r0, r5
 8004264:	47b0      	blx	r6
 8004266:	1c43      	adds	r3, r0, #1
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	d106      	bne.n	800427a <__sflush_r+0x62>
 800426c:	6829      	ldr	r1, [r5, #0]
 800426e:	291d      	cmp	r1, #29
 8004270:	d82b      	bhi.n	80042ca <__sflush_r+0xb2>
 8004272:	4a2a      	ldr	r2, [pc, #168]	@ (800431c <__sflush_r+0x104>)
 8004274:	410a      	asrs	r2, r1
 8004276:	07d6      	lsls	r6, r2, #31
 8004278:	d427      	bmi.n	80042ca <__sflush_r+0xb2>
 800427a:	2200      	movs	r2, #0
 800427c:	6062      	str	r2, [r4, #4]
 800427e:	04d9      	lsls	r1, r3, #19
 8004280:	6922      	ldr	r2, [r4, #16]
 8004282:	6022      	str	r2, [r4, #0]
 8004284:	d504      	bpl.n	8004290 <__sflush_r+0x78>
 8004286:	1c42      	adds	r2, r0, #1
 8004288:	d101      	bne.n	800428e <__sflush_r+0x76>
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	b903      	cbnz	r3, 8004290 <__sflush_r+0x78>
 800428e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004292:	602f      	str	r7, [r5, #0]
 8004294:	b1b9      	cbz	r1, 80042c6 <__sflush_r+0xae>
 8004296:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800429a:	4299      	cmp	r1, r3
 800429c:	d002      	beq.n	80042a4 <__sflush_r+0x8c>
 800429e:	4628      	mov	r0, r5
 80042a0:	f7ff fec2 	bl	8004028 <_free_r>
 80042a4:	2300      	movs	r3, #0
 80042a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80042a8:	e00d      	b.n	80042c6 <__sflush_r+0xae>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b0      	blx	r6
 80042b0:	4602      	mov	r2, r0
 80042b2:	1c50      	adds	r0, r2, #1
 80042b4:	d1c9      	bne.n	800424a <__sflush_r+0x32>
 80042b6:	682b      	ldr	r3, [r5, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0c6      	beq.n	800424a <__sflush_r+0x32>
 80042bc:	2b1d      	cmp	r3, #29
 80042be:	d001      	beq.n	80042c4 <__sflush_r+0xac>
 80042c0:	2b16      	cmp	r3, #22
 80042c2:	d11e      	bne.n	8004302 <__sflush_r+0xea>
 80042c4:	602f      	str	r7, [r5, #0]
 80042c6:	2000      	movs	r0, #0
 80042c8:	e022      	b.n	8004310 <__sflush_r+0xf8>
 80042ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ce:	b21b      	sxth	r3, r3
 80042d0:	e01b      	b.n	800430a <__sflush_r+0xf2>
 80042d2:	690f      	ldr	r7, [r1, #16]
 80042d4:	2f00      	cmp	r7, #0
 80042d6:	d0f6      	beq.n	80042c6 <__sflush_r+0xae>
 80042d8:	0793      	lsls	r3, r2, #30
 80042da:	680e      	ldr	r6, [r1, #0]
 80042dc:	bf08      	it	eq
 80042de:	694b      	ldreq	r3, [r1, #20]
 80042e0:	600f      	str	r7, [r1, #0]
 80042e2:	bf18      	it	ne
 80042e4:	2300      	movne	r3, #0
 80042e6:	eba6 0807 	sub.w	r8, r6, r7
 80042ea:	608b      	str	r3, [r1, #8]
 80042ec:	f1b8 0f00 	cmp.w	r8, #0
 80042f0:	dde9      	ble.n	80042c6 <__sflush_r+0xae>
 80042f2:	6a21      	ldr	r1, [r4, #32]
 80042f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80042f6:	4643      	mov	r3, r8
 80042f8:	463a      	mov	r2, r7
 80042fa:	4628      	mov	r0, r5
 80042fc:	47b0      	blx	r6
 80042fe:	2800      	cmp	r0, #0
 8004300:	dc08      	bgt.n	8004314 <__sflush_r+0xfc>
 8004302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004314:	4407      	add	r7, r0
 8004316:	eba8 0800 	sub.w	r8, r8, r0
 800431a:	e7e7      	b.n	80042ec <__sflush_r+0xd4>
 800431c:	dfbffffe 	.word	0xdfbffffe

08004320 <_fflush_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	690b      	ldr	r3, [r1, #16]
 8004324:	4605      	mov	r5, r0
 8004326:	460c      	mov	r4, r1
 8004328:	b913      	cbnz	r3, 8004330 <_fflush_r+0x10>
 800432a:	2500      	movs	r5, #0
 800432c:	4628      	mov	r0, r5
 800432e:	bd38      	pop	{r3, r4, r5, pc}
 8004330:	b118      	cbz	r0, 800433a <_fflush_r+0x1a>
 8004332:	6a03      	ldr	r3, [r0, #32]
 8004334:	b90b      	cbnz	r3, 800433a <_fflush_r+0x1a>
 8004336:	f7ff fc8f 	bl	8003c58 <__sinit>
 800433a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f3      	beq.n	800432a <_fflush_r+0xa>
 8004342:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004344:	07d0      	lsls	r0, r2, #31
 8004346:	d404      	bmi.n	8004352 <_fflush_r+0x32>
 8004348:	0599      	lsls	r1, r3, #22
 800434a:	d402      	bmi.n	8004352 <_fflush_r+0x32>
 800434c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800434e:	f7ff fe68 	bl	8004022 <__retarget_lock_acquire_recursive>
 8004352:	4628      	mov	r0, r5
 8004354:	4621      	mov	r1, r4
 8004356:	f7ff ff5f 	bl	8004218 <__sflush_r>
 800435a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800435c:	07da      	lsls	r2, r3, #31
 800435e:	4605      	mov	r5, r0
 8004360:	d4e4      	bmi.n	800432c <_fflush_r+0xc>
 8004362:	89a3      	ldrh	r3, [r4, #12]
 8004364:	059b      	lsls	r3, r3, #22
 8004366:	d4e1      	bmi.n	800432c <_fflush_r+0xc>
 8004368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800436a:	f7ff fe5b 	bl	8004024 <__retarget_lock_release_recursive>
 800436e:	e7dd      	b.n	800432c <_fflush_r+0xc>

08004370 <__swhatbuf_r>:
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	460c      	mov	r4, r1
 8004374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004378:	2900      	cmp	r1, #0
 800437a:	b096      	sub	sp, #88	@ 0x58
 800437c:	4615      	mov	r5, r2
 800437e:	461e      	mov	r6, r3
 8004380:	da0d      	bge.n	800439e <__swhatbuf_r+0x2e>
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	bf14      	ite	ne
 800438e:	2340      	movne	r3, #64	@ 0x40
 8004390:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004394:	2000      	movs	r0, #0
 8004396:	6031      	str	r1, [r6, #0]
 8004398:	602b      	str	r3, [r5, #0]
 800439a:	b016      	add	sp, #88	@ 0x58
 800439c:	bd70      	pop	{r4, r5, r6, pc}
 800439e:	466a      	mov	r2, sp
 80043a0:	f000 f848 	bl	8004434 <_fstat_r>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	dbec      	blt.n	8004382 <__swhatbuf_r+0x12>
 80043a8:	9901      	ldr	r1, [sp, #4]
 80043aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80043ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80043b2:	4259      	negs	r1, r3
 80043b4:	4159      	adcs	r1, r3
 80043b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043ba:	e7eb      	b.n	8004394 <__swhatbuf_r+0x24>

080043bc <__smakebuf_r>:
 80043bc:	898b      	ldrh	r3, [r1, #12]
 80043be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043c0:	079d      	lsls	r5, r3, #30
 80043c2:	4606      	mov	r6, r0
 80043c4:	460c      	mov	r4, r1
 80043c6:	d507      	bpl.n	80043d8 <__smakebuf_r+0x1c>
 80043c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	6123      	str	r3, [r4, #16]
 80043d0:	2301      	movs	r3, #1
 80043d2:	6163      	str	r3, [r4, #20]
 80043d4:	b003      	add	sp, #12
 80043d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d8:	ab01      	add	r3, sp, #4
 80043da:	466a      	mov	r2, sp
 80043dc:	f7ff ffc8 	bl	8004370 <__swhatbuf_r>
 80043e0:	9f00      	ldr	r7, [sp, #0]
 80043e2:	4605      	mov	r5, r0
 80043e4:	4639      	mov	r1, r7
 80043e6:	4630      	mov	r0, r6
 80043e8:	f7ff fe8a 	bl	8004100 <_malloc_r>
 80043ec:	b948      	cbnz	r0, 8004402 <__smakebuf_r+0x46>
 80043ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043f2:	059a      	lsls	r2, r3, #22
 80043f4:	d4ee      	bmi.n	80043d4 <__smakebuf_r+0x18>
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	f043 0302 	orr.w	r3, r3, #2
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	e7e2      	b.n	80043c8 <__smakebuf_r+0xc>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	6020      	str	r0, [r4, #0]
 8004406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800440a:	81a3      	strh	r3, [r4, #12]
 800440c:	9b01      	ldr	r3, [sp, #4]
 800440e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004412:	b15b      	cbz	r3, 800442c <__smakebuf_r+0x70>
 8004414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004418:	4630      	mov	r0, r6
 800441a:	f000 f81d 	bl	8004458 <_isatty_r>
 800441e:	b128      	cbz	r0, 800442c <__smakebuf_r+0x70>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	431d      	orrs	r5, r3
 8004430:	81a5      	strh	r5, [r4, #12]
 8004432:	e7cf      	b.n	80043d4 <__smakebuf_r+0x18>

08004434 <_fstat_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4d07      	ldr	r5, [pc, #28]	@ (8004454 <_fstat_r+0x20>)
 8004438:	2300      	movs	r3, #0
 800443a:	4604      	mov	r4, r0
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	602b      	str	r3, [r5, #0]
 8004442:	f7fc fb51 	bl	8000ae8 <_fstat>
 8004446:	1c43      	adds	r3, r0, #1
 8004448:	d102      	bne.n	8004450 <_fstat_r+0x1c>
 800444a:	682b      	ldr	r3, [r5, #0]
 800444c:	b103      	cbz	r3, 8004450 <_fstat_r+0x1c>
 800444e:	6023      	str	r3, [r4, #0]
 8004450:	bd38      	pop	{r3, r4, r5, pc}
 8004452:	bf00      	nop
 8004454:	200002b4 	.word	0x200002b4

08004458 <_isatty_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	4d06      	ldr	r5, [pc, #24]	@ (8004474 <_isatty_r+0x1c>)
 800445c:	2300      	movs	r3, #0
 800445e:	4604      	mov	r4, r0
 8004460:	4608      	mov	r0, r1
 8004462:	602b      	str	r3, [r5, #0]
 8004464:	f7fc fb50 	bl	8000b08 <_isatty>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d102      	bne.n	8004472 <_isatty_r+0x1a>
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	b103      	cbz	r3, 8004472 <_isatty_r+0x1a>
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	200002b4 	.word	0x200002b4

08004478 <_sbrk_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4d06      	ldr	r5, [pc, #24]	@ (8004494 <_sbrk_r+0x1c>)
 800447c:	2300      	movs	r3, #0
 800447e:	4604      	mov	r4, r0
 8004480:	4608      	mov	r0, r1
 8004482:	602b      	str	r3, [r5, #0]
 8004484:	f7fc fb58 	bl	8000b38 <_sbrk>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	d102      	bne.n	8004492 <_sbrk_r+0x1a>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	b103      	cbz	r3, 8004492 <_sbrk_r+0x1a>
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	bd38      	pop	{r3, r4, r5, pc}
 8004494:	200002b4 	.word	0x200002b4

08004498 <_init>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr

080044a4 <_fini>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr
